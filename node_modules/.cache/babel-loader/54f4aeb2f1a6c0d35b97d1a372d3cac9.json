{"ast":null,"code":"/*\r\nNotes:\r\n\r\n1) The JavaScript prototype property allows you to add new properties and methods to object constructors:\r\n\r\n*/\nexport function BinaryHeap(priorityFunction) {\n  this.heap = [];\n  this.priorityFunction = priorityFunction;\n}\n_c = BinaryHeap;\nBinaryHeap.prototype = {\n  push: function (node) {\n    // add new value to the end of the array\n    this.heap.push(node); //balance the heap\n\n    this.heapify(this.heap.length - 1);\n  },\n  pop: function () {\n    // return the first element\n    var result = this.heap[0];\n    var end = this.heap.pop(); //If any element is left, put the end element to the start, and let it bubble up\n\n    if (this.heap.length > 0) {\n      this.heap[0] = end; //push the element downwards if it is greater than its childern\n\n      this.balanceHeapDownwards(0);\n    }\n\n    return result;\n  },\n  remove: function (node) {//Get first index of value in heap\n    // var i = this.heap.indexOf(node);\n    //to be completed\n  },\n  size: function () {\n    return this.heap.length;\n  },\n  find: function (node) {\n    var i = this.heap.indexOf(node);\n    if (i === -1) return 0;else return 1;\n  },\n  updateElement: function (node) {\n    this.heapify(this.heap.indexOf(node));\n  },\n  heapify: function (ind) {\n    var element = this.heap[ind];\n\n    while (ind > 0) {\n      var parentInd = (ind + 1 >> 1) - 1;\n      var parent = this.heap[parentInd]; //Swap if parent is greater than child\n\n      if (this.priorityFunction(element) < this.priorityFunction(parent)) {\n        this.heap[parentInd] = element;\n        this.heap[ind] = parent; //update ind\n\n        ind = parentInd;\n      } else {\n        break;\n      }\n    }\n  },\n  balanceHeapDownwards: function (n) {\n    var length = this.heap.length;\n    var element = this.heap[n];\n    var elemScore = this.priorityFunction(element);\n\n    while (true) {\n      //Compute indices of child elements\n      var child2N = n + 1 << 1;\n      var child1N = child2N - 1;\n      var swap = null; //store the new position of element\n\n      var child1Score;\n\n      if (child1N < length) {\n        //if child exists\n        var child1 = this.heap[child1N];\n        child1Score = this.priorityFunction(child1); //If child's Score is less than parent\n\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      if (child2N < length) {\n        //if child exists\n        var child2 = this.heap[child2N];\n        var child2Score = this.priorityFunction(child2);\n\n        if (child2Score < (swap == null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      } // element needs to be moved up\n\n\n      if (swap != null) {\n        this.heap[n] = this.heap[swap];\n        this.heap[swap] = element;\n        n = swap;\n      } else {\n        break;\n      }\n    }\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"BinaryHeap\");","map":{"version":3,"names":["BinaryHeap","priorityFunction","heap","prototype","push","node","heapify","length","pop","result","end","balanceHeapDownwards","remove","size","find","i","indexOf","updateElement","ind","element","parentInd","parent","n","elemScore","child2N","child1N","swap","child1Score","child1","child2","child2Score"],"sources":["C:/Users/Sagar Yadav/OneDrive/Documents/Projects/PathFinding-Visualizer/src/algorithms/binaryHeap.js"],"sourcesContent":["/*\r\nNotes:\r\n\r\n1) The JavaScript prototype property allows you to add new properties and methods to object constructors:\r\n\r\n*/\r\n\r\nexport function BinaryHeap(priorityFunction) {\r\n  this.heap = [];\r\n  this.priorityFunction = priorityFunction;\r\n}\r\n\r\nBinaryHeap.prototype = {\r\n  push: function (node) {\r\n    // add new value to the end of the array\r\n    this.heap.push(node);\r\n\r\n    //balance the heap\r\n    this.heapify(this.heap.length - 1);\r\n  },\r\n\r\n  pop: function () {\r\n    // return the first element\r\n    var result = this.heap[0];\r\n\r\n    var end = this.heap.pop();\r\n\r\n    //If any element is left, put the end element to the start, and let it bubble up\r\n    if (this.heap.length > 0) {\r\n      this.heap[0] = end;\r\n      //push the element downwards if it is greater than its childern\r\n      this.balanceHeapDownwards(0);\r\n    }\r\n    return result;\r\n  },\r\n\r\n  remove: function (node) {\r\n    //Get first index of value in heap\r\n    // var i = this.heap.indexOf(node);\r\n    //to be completed\r\n  },\r\n\r\n  size: function () {\r\n    return this.heap.length;\r\n  },\r\n  find: function (node) {\r\n    var i = this.heap.indexOf(node);\r\n    if (i === -1) return 0;\r\n    else return 1;\r\n  },\r\n  updateElement: function (node) {\r\n    this.heapify(this.heap.indexOf(node));\r\n  },\r\n  heapify: function (ind) {\r\n    var element = this.heap[ind];\r\n\r\n    while (ind > 0) {\r\n      var parentInd = ((ind + 1) >> 1) - 1;\r\n      var parent = this.heap[parentInd];\r\n\r\n      //Swap if parent is greater than child\r\n      if (this.priorityFunction(element) < this.priorityFunction(parent)) {\r\n        this.heap[parentInd] = element;\r\n        this.heap[ind] = parent;\r\n        //update ind\r\n        ind = parentInd;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  },\r\n  balanceHeapDownwards: function (n) {\r\n    var length = this.heap.length;\r\n    var element = this.heap[n];\r\n    var elemScore = this.priorityFunction(element);\r\n\r\n    while (true) {\r\n      //Compute indices of child elements\r\n      var child2N = (n + 1) << 1;\r\n      var child1N = child2N - 1;\r\n\r\n      var swap = null; //store the new position of element\r\n      var child1Score;\r\n\r\n      if (child1N < length) {\r\n        //if child exists\r\n        var child1 = this.heap[child1N];\r\n        child1Score = this.priorityFunction(child1);\r\n\r\n        //If child's Score is less than parent\r\n        if (child1Score < elemScore) {\r\n          swap = child1N;\r\n        }\r\n      }\r\n\r\n      if (child2N < length) {\r\n        //if child exists\r\n        var child2 = this.heap[child2N];\r\n        var child2Score = this.priorityFunction(child2);\r\n\r\n        if (child2Score < (swap == null ? elemScore : child1Score)) {\r\n          swap = child2N;\r\n        }\r\n      }\r\n      // element needs to be moved up\r\n      if (swap != null) {\r\n        this.heap[n] = this.heap[swap];\r\n        this.heap[swap] = element;\r\n        n = swap;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}