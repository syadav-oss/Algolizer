{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sagar Yadav\\\\OneDrive\\\\Documents\\\\Projects\\\\PathFinding-Visualizer\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.jsx\";\n// import React, { Component, forwardRef } from \"react\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport ControlPanel from \"./ControlPanel/ControlPanel\";\nimport \"./PathfindingVisualizer.css\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\nimport { dfs } from \"../algorithms/dfs\";\nimport { bfs } from \"../algorithms/bfs\";\nimport { aStar } from \"../algorithms/aStar\";\nimport { RecursiveDivision } from \"../mazes/recursiveDiv\";\nimport { basicRandom } from \"../mazes/basicRandom\";\nimport { simpleStair } from \"../mazes/simpleStair\";\nimport { basicWeight } from \"../mazes/basicWeight\"; // import { Alert } from \"bootstrap\";\n// import { dijkstraOld } from \"../algorithms/dijkstraOld\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet StartNodeRow = 8;\nlet StartNodeCol = 10;\nlet EndNodeRow = 8;\nlet EndNodeCol = 50;\nlet AlgorithmSelected = 0;\nlet weight = 0;\nlet speed_selected = 1;\nlet isAlgoRunning = 0;\nlet isGeneratingGrid = 0;\nlet stationNodeRow = -1;\nlet stationNodeCol = -1;\nlet allowedDirections = 4;\nlet theme = 1;\nlet extraWallClass = \"\";\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.changeState = function (row, col, isFinish, isStart, isWall, extraClassName) {\n      let isStation = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      let weight = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      const node = _this.state.grid[row][col];\n      node.isFinish = isFinish;\n      node.isStart = isStart;\n      node.isWall = isWall;\n      node.isStation = isStation;\n      node.isVisited = false;\n      node.distance = Infinity;\n      node.previousNode = null;\n      if (weight) node.weight = weight;\n      const element = document.getElementById(`node-${node.row}-${node.col}`);\n\n      if (weight > 1) {\n        extraClassName = `${extraClassName}-${weight}`;\n      } else if (!isFinish && !isStart && !isWall && !isStation && weight === 1) {\n        extraClassName = \"\";\n      }\n\n      element.className = `node ${extraClassName}`;\n      element.isFinish = isFinish;\n      element.isStart = isStart;\n      element.isWall = isWall;\n      element.isStation = isStation;\n      element.extraClassName = extraClassName;\n      return;\n    };\n\n    this.selectAnAlgorithm = algo => {\n      if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n        return;\n      }\n\n      AlgorithmSelected = algo;\n      const buttonElement = document.getElementById(\"visualise-button\");\n      var algoName = \"\";\n\n      if (algo === 1) {\n        algoName = \"Djikstra\";\n      } else if (algo === 2) {\n        algoName = \"A* Star\";\n      } else if (algo === 3) {\n        algoName = \"DFS\";\n      } else if (algo === 4) {\n        algoName = \"BFS\";\n      }\n\n      if ((algo === 3 || algo === 4) && isWeightPresent(this.state.grid)) {\n        if (algo === 3) {\n          // buttonElement.innerHTML = `DFS can't run with weighted grid. Remove the weights first`;\n          alert(\"DFS can't run with weighted grid. Remove the weights first\");\n        } else if (algo === 4) {\n          // buttonElement.innerHTML = `BFS can't run with weighted grid. Remove the weights first`;\n          alert(\"BFS can't run with weighted grid. Remove the weights first\");\n        }\n\n        AlgorithmSelected = 0;\n        return;\n      }\n\n      buttonElement.innerHTML = `Visualise ${algoName}`;\n    };\n\n    this.mazeGenerate = mazeAlgo => {\n      if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n        return;\n      }\n\n      this.clearBoard();\n      isGeneratingGrid = 1; // updateButtonState(\"text-danger\");\n\n      updateAlertBox(\"block\", isAlgoRunning, isGeneratingGrid);\n      const {\n        grid\n      } = this.state;\n      var forWalls;\n\n      if (mazeAlgo === 1) {\n        forWalls = RecursiveDivision(grid);\n      } else if (mazeAlgo === 2) {\n        forWalls = basicRandom(grid);\n      } else if (mazeAlgo === 3) {\n        forWalls = basicWeight(grid);\n      } else if (mazeAlgo === 4) {\n        forWalls = simpleStair(grid);\n      } else {\n        return;\n      }\n\n      for (let i = 0; i < forWalls.length; i++) {\n        setTimeout(() => {\n          isGeneratingGrid = 1;\n          const node = forWalls[i];\n          const element = document.getElementById(`node-${node.row}-${node.col}`);\n\n          if (element.className !== \"node node-start\" && element.className !== \"node node-finish\") {\n            // element.className = \"node node-visited\";\n            if (mazeAlgo === 3) {\n              this.changeState(node.row, node.col, false, false, false, \"node-weight\", false, node.weight);\n            } else {\n              this.changeState(node.row, node.col, false, false, true, `node-wall${extraWallClass} wall-animate${extraWallClass}`);\n            }\n          }\n\n          if (i === forWalls.length - 1) {\n            isGeneratingGrid = 0;\n            updateAlertBox(\"none\", isAlgoRunning, isGeneratingGrid);\n          }\n        }, 20 * i);\n      }\n\n      return;\n    };\n\n    this.addWeight = wht => {\n      if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n        return;\n      }\n\n      if (wht > 1 && AlgorithmSelected === 3) {\n        alert(\"DFS can't run with weighted grid.\");\n        return;\n      }\n\n      if (wht > 1 && AlgorithmSelected === 4) {\n        alert(\"BFS can't run with weighted grid.\");\n        return;\n      }\n\n      this.addingWeights = 1;\n      this.addingStations = false;\n      this.wallNodeChange = false;\n      weight = wht;\n      if (wht > 1) document.getElementById(\"weight-button\").style.color = \"#216cf8\";\n    };\n\n    this.addStation = () => {\n      if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n        return;\n      }\n\n      if (stationNodeRow !== -1) {\n        this.changeState(stationNodeRow, stationNodeCol, false, false, false, \"node \", false, 1);\n        stationNodeRow = -1;\n        stationNodeCol = -1;\n        const buttonElement = document.getElementById(\"station-button\");\n        buttonElement.innerHTML = \"Add Station\";\n      } else {\n        this.addingStations = true;\n        this.addingWeights = 0;\n        document.getElementById(\"station-button\").style.color = \"#216cf8\";\n      }\n    };\n\n    this.removePrevForNextAlgo = () => {\n      isAlgoRunning = 0;\n      document.getElementById(\"distance\").innerHTML = 0;\n\n      for (let r = 0; r < this.state.GridRowSize; ++r) {\n        for (let c = 0; c < this.state.GridColSize; ++c) {\n          const node = this.state.grid[r][c];\n\n          if (r === EndNodeRow && c === EndNodeCol) {\n            this.changeState(r, c, true, false, false, \"node-finish\");\n          } else if (r === StartNodeRow && c === StartNodeCol) {\n            this.changeState(r, c, false, true, false, \"node-start\");\n          } else {\n            // const element = document.getElementById(`node-${r}-${c}`);\n            let class_name = \"\";\n\n            if (node.isWall === true) {\n              class_name = `node-wall${extraWallClass}`;\n            } else if (node.isStation === true) {\n              class_name = \"node-station\";\n            } else if (node.weight > 1) {\n              class_name = \"node-weight\";\n            }\n\n            this.changeState(r, c, false, false, node.isWall, class_name, node.isStation, node.weight);\n          }\n        }\n      }\n    };\n\n    this.resetForStationPath = () => {\n      for (let r = 0; r < this.state.GridRowSize; ++r) {\n        for (let c = 0; c < this.state.GridColSize; ++c) {\n          const node = this.state.grid[r][c];\n          node.isVisited = false;\n          node.distance = Infinity;\n          node.previousNode = null;\n        }\n      }\n    };\n\n    this.visulalizeAlgorithm = () => {\n      if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n        return;\n      }\n\n      this.removePrevForNextAlgo();\n      document.getElementById(\"distance\").innerHTML = 0;\n      const {\n        grid\n      } = this.state;\n      const startNode = grid[StartNodeRow][StartNodeCol];\n      const finishNode = grid[EndNodeRow][EndNodeCol];\n      let visitedNodesInOrderToStation = [];\n      let nodesInShotestPathOrderToStation = [];\n      let isStation = false;\n      let startToStation = Infinity;\n\n      if (stationNodeRow !== -1) {\n        isStation = true;\n      }\n\n      let stationNode;\n\n      if (isStation) {\n        stationNode = grid[stationNodeRow][stationNodeCol];\n      }\n\n      let visitedNodesInOrder = [];\n      isAlgoRunning = 1; // updateButtonState(\"text-danger\");\n\n      if (AlgorithmSelected === 1) {\n        isAlgoRunning = 1;\n\n        if (isStation) {\n          visitedNodesInOrderToStation = dijkstra(grid, startNode, stationNode, allowedDirections);\n          nodesInShotestPathOrderToStation = getNodesInShortestPathOrder(stationNode);\n          startToStation = visitedNodesInOrderToStation.length;\n          nodesInShotestPathOrderToStation.pop();\n          this.resetForStationPath();\n        }\n\n        if (isStation) {\n          visitedNodesInOrder = dijkstra(grid, stationNode, finishNode, allowedDirections);\n          visitedNodesInOrder = visitedNodesInOrderToStation.concat(visitedNodesInOrder);\n        } else {\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode, allowedDirections);\n        }\n      } else if (AlgorithmSelected === 2) {\n        isAlgoRunning = 2;\n\n        if (isStation) {\n          visitedNodesInOrderToStation = aStar(grid, startNode, stationNode, allowedDirections);\n          nodesInShotestPathOrderToStation = getNodesInShortestPathOrder(stationNode);\n          startToStation = visitedNodesInOrderToStation.length;\n          nodesInShotestPathOrderToStation.pop();\n          this.resetForStationPath();\n        }\n\n        if (isStation) {\n          visitedNodesInOrder = aStar(grid, stationNode, finishNode, allowedDirections);\n          visitedNodesInOrder = visitedNodesInOrderToStation.concat(visitedNodesInOrder);\n        } else {\n          visitedNodesInOrder = aStar(grid, startNode, finishNode, allowedDirections);\n        }\n      } else if (AlgorithmSelected === 3) {\n        isAlgoRunning = 3;\n\n        if (isStation) {\n          visitedNodesInOrderToStation = dfs(grid, startNode, stationNode, allowedDirections);\n          nodesInShotestPathOrderToStation = getNodesInShortestPathOrder(stationNode);\n          startToStation = visitedNodesInOrderToStation.length;\n          nodesInShotestPathOrderToStation.pop();\n          this.resetForStationPath();\n        }\n\n        if (isStation) {\n          visitedNodesInOrder = dfs(grid, stationNode, finishNode, allowedDirections);\n          visitedNodesInOrder = visitedNodesInOrderToStation.concat(visitedNodesInOrder);\n        } else {\n          visitedNodesInOrder = dfs(grid, startNode, finishNode, allowedDirections);\n        }\n      } else if (AlgorithmSelected === 4) {\n        isAlgoRunning = 4;\n\n        if (isStation) {\n          visitedNodesInOrderToStation = bfs(grid, startNode, stationNode, allowedDirections);\n          nodesInShotestPathOrderToStation = getNodesInShortestPathOrder(stationNode);\n          startToStation = visitedNodesInOrderToStation.length;\n          nodesInShotestPathOrderToStation.pop();\n          this.resetForStationPath();\n        }\n\n        if (isStation) {\n          visitedNodesInOrder = bfs(grid, stationNode, finishNode, allowedDirections);\n          visitedNodesInOrder = visitedNodesInOrderToStation.concat(visitedNodesInOrder);\n        } else {\n          visitedNodesInOrder = bfs(grid, startNode, finishNode, allowedDirections);\n        }\n      } else {\n        const buttonElement = document.getElementById(\"visualise-button\");\n        buttonElement.innerHTML = \"!!! Select Algorithm !!!\";\n        isAlgoRunning = 0;\n        return;\n      }\n\n      updateAlertBox(\"block\", isAlgoRunning, isGeneratingGrid);\n      let nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n\n      if (isStation) {\n        nodesInShortestPathOrder = nodesInShotestPathOrderToStation.concat(nodesInShortestPathOrder);\n      }\n\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder, startToStation);\n    };\n\n    this.clearBoard = () => {\n      document.getElementById(\"distance\").innerHTML = 0;\n\n      if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n        return;\n      }\n\n      stationNodeCol = -1;\n      stationNodeRow = -1;\n      const buttonElement = document.getElementById(\"station-button\");\n      buttonElement.innerHTML = \"Add Station\";\n      this.addingStations = false;\n\n      for (let r = 0; r < this.state.GridRowSize; ++r) {\n        for (let c = 0; c < this.state.GridColSize; ++c) {\n          if (r === EndNodeRow && c === EndNodeCol) {\n            this.changeState(r, c, true, false, false, \"node-finish\", false, 1);\n          } else if (r === StartNodeRow && c === StartNodeCol) {\n            this.changeState(r, c, false, true, false, \"node-start\", false, 1);\n          } else {\n            this.changeState(r, c, false, false, false, \"node \", false, 1);\n          }\n        }\n      }\n    };\n\n    this.clearWalls = () => {\n      if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n        return;\n      }\n\n      for (let r = 0; r < this.state.grid.length; ++r) {\n        for (let c = 0; c < this.state.grid[r].length; ++c) {\n          if (this.state.grid[r][c].isWall) {\n            this.changeState(r, c, false, false, false, \"\", false, 1);\n          }\n        }\n      }\n    };\n\n    this.clearWeight = () => {\n      if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n        return;\n      }\n\n      for (let r = 0; r < this.state.grid.length; ++r) {\n        for (let c = 0; c < this.state.grid[r].length; ++c) {\n          if (this.state.grid[r][c].weight > 1) {\n            this.changeState(r, c, false, false, false, \"\", false, 1);\n          }\n        }\n      }\n    };\n\n    this.clearPath = () => {\n      if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n        return;\n      }\n\n      this.removePrevForNextAlgo();\n    };\n\n    this.changeDirection = directionCount => {\n      if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n        return;\n      }\n\n      if (directionCount === 4) {\n        document.getElementById(\"select-directions-toggle-text\").innerHTML = \"Directions-4\";\n      } else if (directionCount === 8) {\n        document.getElementById(\"select-directions-toggle-text\").innerHTML = \"Directions-8\";\n      }\n\n      allowedDirections = directionCount;\n    };\n\n    this.selectSpeedOfVisualization = speed => {\n      if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n        return;\n      }\n\n      if (speed === 1.5) {\n        // console.log( document.getElementById(\"select-speed-toggle-text\").innerHTML);\n        document.getElementById(\"select-speed-toggle-text\").innerHTML = \"Speed-Slow\";\n      } else if (speed === 1.0) {\n        document.getElementById(\"select-speed-toggle-text\").innerHTML = \"Speed-Avg\";\n      } else if (speed === 0.5) {\n        document.getElementById(\"select-speed-toggle-text\").innerHTML = \"Speed-Fast\";\n      }\n\n      speed_selected = speed;\n    };\n\n    this.toggleTheme = () => {\n      if (theme === 1) {\n        theme = 2;\n        extraWallClass = \"-dark\";\n        this.setState({});\n        document.getElementById(\"wall-icon\").style.backgroundColor = \"rgb(37,98,145)\";\n        document.getElementById(\"unvisited-icon\").style.backgroundColor = \"#17191f\";\n        document.getElementById(\"path_find\").className = \"backg\";\n        document.getElementById(\"cth\").style.color = \"white\";\n        document.getElementById(\"alert-box-text\").style.color = \"darkgrey\";\n        document.getElementById(\"albx\").className = \"shallow-bulge-dark\";\n        document.getElementById(\"wn\").style.color = \"white\";\n        document.getElementById(\"st\").style.color = \"white\";\n        document.getElementById(\"en\").style.color = \"white\";\n        document.getElementById(\"sta\").style.color = \"white\";\n        document.getElementById(\"we\").style.color = \"white\";\n        document.getElementById(\"uv\").style.color = \"white\";\n        document.getElementById(\"vis\").style.color = \"white\";\n        document.getElementById(\"sp\").style.color = \"white\";\n      } else {\n        theme = 1;\n        extraWallClass = \"\";\n        this.setState({});\n        document.getElementById(\"wall-icon\").style.backgroundColor = \"rgb(12,53,71)\";\n        document.getElementById(\"unvisited-icon\").style.backgroundColor = \"rgb(255,255,255)\";\n        document.getElementById(\"path_find\").className = \"\";\n        document.getElementById(\"wn\").style.color = \"black\";\n        document.getElementById(\"alert-box-text\").style.color = \"#868b8f\";\n        document.getElementById(\"albx\").className = \"shallow-bulge\";\n        document.getElementById(\"cth\").style.color = \"black\";\n        document.getElementById(\"st\").style.color = \"black\";\n        document.getElementById(\"en\").style.color = \"black\";\n        document.getElementById(\"sta\").style.color = \"black\";\n        document.getElementById(\"we\").style.color = \"black\";\n        document.getElementById(\"uv\").style.color = \"black\";\n        document.getElementById(\"vis\").style.color = \"black\";\n        document.getElementById(\"sp\").style.color = \"black\";\n      }\n    };\n\n    //Call Construct To Parent Class\n    //props refer to the properties, special symbol. Used for passing data to one component to another\n    this.state = {\n      grid: [],\n      GridRowSize: 21,\n      GridColSize: 61,\n      startNodeChange: false,\n      endNodeChange: false,\n      mouseIsPressed: false,\n      wallNodeChange: false,\n      addingStations: false,\n      stationsPresent: true,\n      stationNodeChange: false,\n      addingWeights: 0\n    };\n  } // componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n  // Initialization that requires DOM nodes should go here.\n\n\n  componentDidMount() {\n    const grid = initializeGrid(this.state.GridRowSize, this.state.GridColSize);\n    this.setState({\n      grid: grid\n    });\n  } //This function changes the state of react and DOM element\n\n\n  /********************************\r\n  Handling Mouse Events \r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\n  handleMouseDown(row, col) {\n    //If algo is running no mouse event will be entertained\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n      return;\n    }\n\n    const node = this.state.grid[row][col]; //Start & End Node Change is only allowed when weights and stations are not being added\n\n    if (node.isStart && !this.addingWeights && !this.addingStations) {\n      this.startNodeChange = true;\n    } //changing End Node\n    else if (node.isFinish && !this.addingWeights && !this.addingStations) {\n      this.endNodeChange = true;\n    } //Changing Station Node\n    //Adding weights & stations only when the node is not a special node\n    else if (node.isStation && !this.addingWeights && !this.addingStations && !this.startNodeChange && !this.endNodeChange) {\n      this.stationNodeChange = true;\n    } //Adding weights\n    else if (!node.isFinish && !node.isStart && !node.isStation && !node.isWall && this.addingWeights === 1) {\n      this.addingWeights = 2;\n      this.changeState(row, col, false, false, false, \"node-weight\", false, weight);\n    } //Adding Station Nodes\n    else if (!node.isFinish && !node.isStart && !node.isStation && !node.isWall && this.addingStations === true && stationNodeRow === -1 && node.weight <= 1) {\n      this.stationsPresent = true;\n      stationNodeRow = row;\n      stationNodeCol = col;\n      const buttonElement = document.getElementById(\"station-button\");\n      document.getElementById(\"station-button\").style.color = \"white\";\n      buttonElement.innerHTML = \"Remove Station\";\n      this.changeState(row, col, false, false, false, \"node-station\", true);\n    } //Allowing wall addition only when adding station and adding weight task are not performed\n    else if ((row !== stationNodeRow || col !== stationNodeCol) && !this.addingStations && !this.addingWeights && node.weight < 2) {\n      const node = this.state.grid[row][col];\n      this.wallNodeChange = true;\n      let className = `node-wall${extraWallClass}`;\n      if (node.isWall) className = \"\";\n      this.changeState(row, col, false, false, !node.isWall, className);\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n      return;\n    }\n\n    const node = this.state.grid[row][col]; //StartNode Change\n\n    if (this.startNodeChange === true && node.isWall === false && node.isStation === false && node.weight < 2) {\n      this.changeState(row, col, false, true, false, \"node-start\");\n      StartNodeRow = row;\n      StartNodeCol = col;\n    } //End Node Change\n    else if (this.endNodeChange === true && node.isWall === false && node.isStation === false && node.weight < 2) {\n      this.changeState(row, col, true, false, false, \"node-finish\");\n      EndNodeRow = row;\n      EndNodeCol = col;\n    } //Station Node Change\n    else if (this.stationNodeChange === true && node.isWall === false && node.weight < 2) {\n      if (node.isStart || node.isFinish) {\n        let classTemp = node.isStart ? \"node-start\" : \"node-finish\";\n        this.changeState(row, col, node.isFinish, node.isStart, false, classTemp);\n        this.stationNodeChange = false;\n        this.addStation();\n      } else {\n        stationNodeRow = row;\n        stationNodeCol = col;\n        this.changeState(row, col, false, false, false, \"node-station\", true);\n      }\n    } //Adding weights\n    else if (!node.isFinish && !node.isStart && !node.isStation && !node.isWall && this.addingWeights === 2) {\n      this.changeState(row, col, false, false, false, \"node-weight\", false, weight);\n    } //Changing wall states\n    else if (!node.isFinish && !node.isStart && (row !== stationNodeRow || col !== stationNodeCol) && this.wallNodeChange === true && !this.addingStations && !this.addingWeights && node.weight < 2) {\n      let className = `node-wall${extraWallClass}`;\n      if (node.isWall) className = \"\";\n      this.changeState(row, col, false, false, !node.isWall, className);\n    }\n  }\n\n  handleMouseLeave(row, col) {\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n      return;\n    }\n\n    const node = this.state.grid[row][col];\n\n    if (this.startNodeChange === true && node.isWall === false) {\n      if (row === EndNodeRow && col === EndNodeCol) {\n        this.changeState(row, col, true, true, false, \"node-finish\");\n        StartNodeRow = row;\n        StartNodeCol = col;\n      } else {\n        this.changeState(row, col, false, false, false, \"node \");\n      }\n    }\n\n    if (this.endNodeChange === true && node.isWall === false) {\n      if (row === StartNodeRow && col === StartNodeCol) {\n        this.changeState(row, col, true, true, false, \"node-start\");\n        EndNodeRow = row;\n        EndNodeCol = col;\n      } else {\n        this.changeState(row, col, false, false, false, \"node \");\n      }\n    }\n\n    if (this.stationNodeChange === true && node.isWall === false) {\n      if (row === StartNodeRow && col === StartNodeCol) {\n        this.changeState(row, col, false, true, false, \"node-start\");\n      } else if (row === EndNodeRow && col === EndNodeCol) {\n        this.changeState(row, col, true, false, false, \"node-finish\");\n      } else {\n        this.changeState(row, col, false, false, false, \"node \", false);\n      }\n    }\n  }\n\n  handleMouseUp(row, col) {\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\n      return;\n    }\n\n    if (this.startNodeChange === true) {\n      this.startNodeChange = false; // In case up node is a wall\n\n      this.changeState(row, col, false, true, false, \"node-start\");\n      StartNodeRow = row;\n      StartNodeCol = col;\n    } else if (this.endNodeChange === true) {\n      this.endNodeChange = false; // In case up node is a wall\n\n      this.changeState(row, col, true, false, false, \"node-finish\");\n      EndNodeRow = row;\n      EndNodeCol = col;\n    } else if (this.wallNodeChange === true) {\n      this.wallNodeChange = false;\n    } else if (this.addingWeights === 2) {\n      this.addingWeights = 0;\n      document.getElementById(\"weight-button\").style.color = \"white\";\n    } else if (this.stationNodeChange === true) {\n      this.stationNodeChange = false;\n    } else if (StartNodeRow !== row && StartNodeCol !== col && StartNodeRow !== row && StartNodeCol !== col && this.addingStations) {\n      this.addingStations = false;\n    }\n  }\n  /********************************\r\n  Select the algorithm\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\n\n\n  /********************************\r\n  Animate the Algorithm\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\n  // We have all the visited nodes in order and the path vector just have to animate it using appropriate timing\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder, startToStation) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i * speed_selected);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const element = document.getElementById(`node-${node.row}-${node.col}`);\n\n        if (element.className !== \"node node-start\" && element.className !== \"node node-finish\" && node.isStation === false) {\n          let class_name = \"node-visited\";\n\n          if (i > startToStation) {\n            class_name = \"node-visited-station\";\n          }\n\n          if (node.weight > 1) {\n            class_name = \"node-visited node-weight-s\";\n            this.changeState(node.row, node.col, false, false, node.isWall, class_name, node.isStation, node.weight);\n          } else {\n            this.changeState(node.row, node.col, false, false, node.isWall, class_name);\n          }\n        }\n      }, 10 * i * speed_selected);\n    }\n  }\n  /********************************\r\n  Animate The Path\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\n\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(\"distance\").innerHTML = parseInt(document.getElementById(\"distance\").innerHTML) + node.weight;\n        const element = document.getElementById(`node-${node.row}-${node.col}`);\n\n        if (element.className !== \"node node-start\" && element.className !== \"node node-finish\" && node.isStation === false) {\n          // element.className = \"node node-shortest-path\";\n          const next_col = nodesInShortestPathOrder[i + 1].col;\n          const next_row = nodesInShortestPathOrder[i + 1].row;\n          let class_name = \"\";\n\n          if (node.weight > 1) {\n            class_name = `node-shortest-path node-weight-${node.weight}`;\n          } else if (next_col === node.col && next_row === node.row + 1) {\n            class_name = \"node-shortest-path node-down\";\n          } else if (next_col === node.col && next_row === node.row - 1) {\n            class_name = \"node-shortest-path node-up\";\n          } else if (next_col === node.col - 1 && next_row === node.row) {\n            class_name = \"node-shortest-path node-left\";\n          } else if (next_col === node.col + 1 && next_row === node.row) {\n            class_name = \"node-shortest-path node-right\";\n          } else if (next_col === node.col + 1 && next_row === node.row + 1) {\n            class_name = \"node-shortest-path node-downright\";\n          } else if (next_col === node.col - 1 && next_row === node.row + 1) {\n            class_name = \"node-shortest-path node-downleft\";\n          } else if (next_col === node.col + 1 && next_row === node.row - 1) {\n            class_name = \"node-shortest-path node-upright\";\n          } else if (next_col === node.col - 1 && next_row === node.row - 1) {\n            class_name = \"node-shortest-path node-upleft\";\n          }\n\n          this.changeState(node.row, node.col, false, false, false, class_name);\n        }\n\n        if (i === nodesInShortestPathOrder.length - 1) {\n          isAlgoRunning = 0;\n          updateAlertBox(\"none\", isAlgoRunning, isGeneratingGrid);\n        }\n      }, 30 * i * speed_selected);\n    }\n  }\n  /********************************\r\n  Visualise the algorithm\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\n\n\n  /********************************\r\n  Render Function\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"path_find\",\n      className: \"\",\n      children: [/*#__PURE__*/_jsxDEV(ControlPanel, {\n        onClickClear_: () => this.clearBoard(),\n        onClickVisualize_: () => this.visulalizeAlgorithm(),\n        onClickSelect_: algo => this.selectAnAlgorithm(algo),\n        onClickAddStation_: () => this.addStation(),\n        onClickAddWeight_: weight => this.addWeight(weight),\n        onClickChangeSpeed_: speed => this.selectSpeedOfVisualization(speed),\n        onClickClearPath_: () => this.clearPath(),\n        onClickClearWeight_: () => this.clearWeight(),\n        onClickClearWalls_: () => this.clearWalls(),\n        onClickGenerateMaze_: mazeAlgo => this.mazeGenerate(mazeAlgo),\n        onClickChangeDirection_: directionCount => this.changeDirection(directionCount),\n        onClickToggleTheme_: () => this.toggleTheme(),\n        theme: theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 993,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: this.state.grid.map((row, rowId) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mar\",\n            children: row.map((node, nodeId) => {\n              const {\n                col,\n                row,\n                isFinish,\n                isStart,\n                isWall,\n                isStation,\n                refElement\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                ref: refElement,\n                col: col,\n                row: row,\n                isFinish: isFinish,\n                isStart: isStart,\n                isWall: isWall,\n                isStation: isStation,\n                theme: theme,\n                onMouseDown_: (row, col) => this.handleMouseDown(row, col),\n                onMouseUp_: (row, col) => this.handleMouseUp(row, col),\n                onMouseEnter_: (row, col) => this.handleMouseEnter(row, col),\n                onMouseLeave_: (row, col) => this.handleMouseLeave(row, col)\n              }, nodeId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1027,\n                columnNumber: 21\n              }, this);\n            })\n          }, rowId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1015,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1012,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 992,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction initializeGrid(GridRowSize, GridColSize) {\n  const grid = [];\n\n  for (let r = 0; r < GridRowSize; ++r) {\n    const row = [];\n\n    for (let c = 0; c < GridColSize; ++c) {\n      row.push(createNode(r, c));\n    }\n\n    grid.push(row);\n  }\n\n  return grid;\n}\n\nconst createNode = (row, col) => {\n  return {\n    col,\n    row,\n    isFinish: row === EndNodeRow && col === EndNodeCol,\n    isStart: row === StartNodeRow && col === StartNodeCol,\n    isWall: false,\n    isStation: false,\n    distance: Infinity,\n    isVisited: false,\n    previousNode: null,\n    weight: 1,\n    refElement: /*#__PURE__*/React.createRef()\n  };\n};\n\nconst updateAlertBox = (display, algoRun, gridGeneration) => {\n  document.getElementById(\"alert-box\").style.display = display;\n\n  if (algoRun === 0 && gridGeneration >= 1) {\n    document.getElementById(\"alert-box-text\").innerHTML = \"Buttons Disabled. Generating Grid.\";\n  } else if (algoRun === 1 && gridGeneration === 0) {\n    document.getElementById(\"alert-box-text\").innerHTML = \"Buttons Disabled. Running Djikstra, a weighted algorithm.\";\n  } else if (algoRun === 2 && gridGeneration === 0) {\n    document.getElementById(\"alert-box-text\").innerHTML = \"Buttons Disabled. Running A*, a weighted algorithm.\";\n  } else if (algoRun === 3 && gridGeneration === 0) {\n    document.getElementById(\"alert-box-text\").innerHTML = \"Buttons Disabled. DFS is an unweighted algorithm which does not gaurantee shortest path.\";\n  } else if (algoRun === 4 && gridGeneration === 0) {\n    document.getElementById(\"alert-box-text\").innerHTML = \"Buttons Disabled. BFS is an unweighted Algorithm.\";\n  }\n};\n\nconst isWeightPresent = grid => {\n  for (let r = 0; r < grid.length; ++r) {\n    for (let c = 0; c < grid[r].length; ++c) {\n      if (grid[r][c].weight > 1) return true;\n    }\n  }\n\n  return false;\n};","map":{"version":3,"names":["React","Component","Node","ControlPanel","dijkstra","getNodesInShortestPathOrder","dfs","bfs","aStar","RecursiveDivision","basicRandom","simpleStair","basicWeight","StartNodeRow","StartNodeCol","EndNodeRow","EndNodeCol","AlgorithmSelected","weight","speed_selected","isAlgoRunning","isGeneratingGrid","stationNodeRow","stationNodeCol","allowedDirections","theme","extraWallClass","PathfindingVisualizer","constructor","props","changeState","row","col","isFinish","isStart","isWall","extraClassName","isStation","node","state","grid","isVisited","distance","Infinity","previousNode","element","document","getElementById","className","selectAnAlgorithm","algo","buttonElement","algoName","isWeightPresent","alert","innerHTML","mazeGenerate","mazeAlgo","clearBoard","updateAlertBox","forWalls","i","length","setTimeout","addWeight","wht","addingWeights","addingStations","wallNodeChange","style","color","addStation","removePrevForNextAlgo","r","GridRowSize","c","GridColSize","class_name","resetForStationPath","visulalizeAlgorithm","startNode","finishNode","visitedNodesInOrderToStation","nodesInShotestPathOrderToStation","startToStation","stationNode","visitedNodesInOrder","pop","concat","nodesInShortestPathOrder","animateAlgorithm","clearWalls","clearWeight","clearPath","changeDirection","directionCount","selectSpeedOfVisualization","speed","toggleTheme","setState","backgroundColor","startNodeChange","endNodeChange","mouseIsPressed","stationsPresent","stationNodeChange","componentDidMount","initializeGrid","handleMouseDown","handleMouseEnter","classTemp","handleMouseLeave","handleMouseUp","animateShortestPath","parseInt","next_col","next_row","render","map","rowId","nodeId","refElement","push","createNode","createRef","display","algoRun","gridGeneration"],"sources":["C:/Users/Sagar Yadav/OneDrive/Documents/Projects/PathFinding-Visualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"sourcesContent":["// import React, { Component, forwardRef } from \"react\";\r\n\r\nimport React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport ControlPanel from \"./ControlPanel/ControlPanel\";\r\nimport \"./PathfindingVisualizer.css\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\nimport { dfs } from \"../algorithms/dfs\";\r\nimport { bfs } from \"../algorithms/bfs\";\r\nimport { aStar } from \"../algorithms/aStar\";\r\nimport { RecursiveDivision } from \"../mazes/recursiveDiv\";\r\nimport { basicRandom } from \"../mazes/basicRandom\";\r\nimport { simpleStair } from \"../mazes/simpleStair\";\r\nimport { basicWeight } from \"../mazes/basicWeight\";\r\n// import { Alert } from \"bootstrap\";\r\n// import { dijkstraOld } from \"../algorithms/dijkstraOld\";\r\n\r\nlet StartNodeRow = 8;\r\nlet StartNodeCol = 10;\r\nlet EndNodeRow = 8;\r\nlet EndNodeCol = 50;\r\nlet AlgorithmSelected = 0;\r\nlet weight = 0;\r\nlet speed_selected = 1;\r\nlet isAlgoRunning = 0;\r\nlet isGeneratingGrid = 0;\r\nlet stationNodeRow = -1;\r\nlet stationNodeCol = -1;\r\nlet allowedDirections = 4;\r\nlet theme = 1;\r\nlet extraWallClass = \"\";\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props); //Call Construct To Parent Class\r\n    //props refer to the properties, special symbol. Used for passing data to one component to another\r\n    this.state = {\r\n      grid: [],\r\n      GridRowSize: 21,\r\n      GridColSize: 61,\r\n      startNodeChange: false,\r\n      endNodeChange: false,\r\n      mouseIsPressed: false,\r\n      wallNodeChange: false,\r\n      addingStations: false,\r\n      stationsPresent: true,\r\n      stationNodeChange: false,\r\n      addingWeights: 0,\r\n    };\r\n  }\r\n\r\n  // componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\r\n  // Initialization that requires DOM nodes should go here.\r\n  componentDidMount() {\r\n    const grid = initializeGrid(this.state.GridRowSize, this.state.GridColSize);\r\n    this.setState({ grid: grid });\r\n  }\r\n\r\n  //This function changes the state of react and DOM element\r\n  changeState = (\r\n    row,\r\n    col,\r\n    isFinish,\r\n    isStart,\r\n    isWall,\r\n    extraClassName,\r\n    isStation = false,\r\n    weight = 0\r\n  ) => {\r\n    const node = this.state.grid[row][col];\r\n    node.isFinish = isFinish;\r\n    node.isStart = isStart;\r\n    node.isWall = isWall;\r\n    node.isStation = isStation;\r\n    node.isVisited = false;\r\n    node.distance = Infinity;\r\n    node.previousNode = null;\r\n    if (weight) node.weight = weight;\r\n    const element = document.getElementById(`node-${node.row}-${node.col}`);\r\n\r\n    if (weight > 1) {\r\n      extraClassName = `${extraClassName}-${weight}`;\r\n    } else if (!isFinish && !isStart && !isWall && !isStation && weight === 1) {\r\n      extraClassName = \"\";\r\n    }\r\n\r\n    element.className = `node ${extraClassName}`;\r\n    element.isFinish = isFinish;\r\n    element.isStart = isStart;\r\n    element.isWall = isWall;\r\n    element.isStation = isStation;\r\n    element.extraClassName = extraClassName;\r\n    return;\r\n  };\r\n\r\n  /********************************\r\n  Handling Mouse Events \r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  handleMouseDown(row, col) {\r\n    //If algo is running no mouse event will be entertained\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    const node = this.state.grid[row][col];\r\n\r\n    //Start & End Node Change is only allowed when weights and stations are not being added\r\n    if (node.isStart && !this.addingWeights && !this.addingStations) {\r\n      this.startNodeChange = true;\r\n    }\r\n    //changing End Node\r\n    else if (node.isFinish && !this.addingWeights && !this.addingStations) {\r\n      this.endNodeChange = true;\r\n    }\r\n    //Changing Station Node\r\n    //Adding weights & stations only when the node is not a special node\r\n    else if (\r\n      node.isStation &&\r\n      !this.addingWeights &&\r\n      !this.addingStations &&\r\n      !this.startNodeChange &&\r\n      !this.endNodeChange\r\n    ) {\r\n      this.stationNodeChange = true;\r\n    }\r\n    //Adding weights\r\n    else if (\r\n      !node.isFinish &&\r\n      !node.isStart &&\r\n      !node.isStation &&\r\n      !node.isWall &&\r\n      this.addingWeights === 1\r\n    ) {\r\n      this.addingWeights = 2;\r\n      this.changeState(\r\n        row,\r\n        col,\r\n        false,\r\n        false,\r\n        false,\r\n        \"node-weight\",\r\n        false,\r\n        weight\r\n      );\r\n    }\r\n    //Adding Station Nodes\r\n    else if (\r\n      !node.isFinish &&\r\n      !node.isStart &&\r\n      !node.isStation &&\r\n      !node.isWall &&\r\n      this.addingStations === true &&\r\n      stationNodeRow === -1 &&\r\n      node.weight <= 1\r\n    ) {\r\n      this.stationsPresent = true;\r\n      stationNodeRow = row;\r\n      stationNodeCol = col;\r\n      const buttonElement = document.getElementById(\"station-button\");\r\n      document.getElementById(\"station-button\").style.color = \"white\";\r\n      buttonElement.innerHTML = \"Remove Station\";\r\n      this.changeState(row, col, false, false, false, \"node-station\", true);\r\n    }\r\n    //Allowing wall addition only when adding station and adding weight task are not performed\r\n    else if (\r\n      (row !== stationNodeRow || col !== stationNodeCol) &&\r\n      !this.addingStations &&\r\n      !this.addingWeights &&\r\n      node.weight < 2\r\n    ) {\r\n      const node = this.state.grid[row][col];\r\n      this.wallNodeChange = true;\r\n      let className = `node-wall${extraWallClass}`;\r\n      if (node.isWall) className = \"\";\r\n      this.changeState(row, col, false, false, !node.isWall, className);\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    const node = this.state.grid[row][col];\r\n\r\n    //StartNode Change\r\n    if (\r\n      this.startNodeChange === true &&\r\n      node.isWall === false &&\r\n      node.isStation === false &&\r\n      node.weight < 2\r\n    ) {\r\n      this.changeState(row, col, false, true, false, \"node-start\");\r\n      StartNodeRow = row;\r\n      StartNodeCol = col;\r\n    }\r\n    //End Node Change\r\n    else if (\r\n      this.endNodeChange === true &&\r\n      node.isWall === false &&\r\n      node.isStation === false &&\r\n      node.weight < 2\r\n    ) {\r\n      this.changeState(row, col, true, false, false, \"node-finish\");\r\n      EndNodeRow = row;\r\n      EndNodeCol = col;\r\n    }\r\n    //Station Node Change\r\n    else if (\r\n      this.stationNodeChange === true &&\r\n      node.isWall === false &&\r\n      node.weight < 2\r\n    ) {\r\n      if (node.isStart || node.isFinish) {\r\n        let classTemp = node.isStart ? \"node-start\" : \"node-finish\";\r\n        this.changeState(\r\n          row,\r\n          col,\r\n          node.isFinish,\r\n          node.isStart,\r\n          false,\r\n          classTemp\r\n        );\r\n        this.stationNodeChange = false;\r\n        this.addStation();\r\n      } else {\r\n        stationNodeRow = row;\r\n        stationNodeCol = col;\r\n        this.changeState(row, col, false, false, false, \"node-station\", true);\r\n      }\r\n    }\r\n    //Adding weights\r\n    else if (\r\n      !node.isFinish &&\r\n      !node.isStart &&\r\n      !node.isStation &&\r\n      !node.isWall &&\r\n      this.addingWeights === 2\r\n    ) {\r\n      this.changeState(\r\n        row,\r\n        col,\r\n        false,\r\n        false,\r\n        false,\r\n        \"node-weight\",\r\n        false,\r\n        weight\r\n      );\r\n    }\r\n\r\n    //Changing wall states\r\n    else if (\r\n      !node.isFinish &&\r\n      !node.isStart &&\r\n      (row !== stationNodeRow || col !== stationNodeCol) &&\r\n      this.wallNodeChange === true &&\r\n      !this.addingStations &&\r\n      !this.addingWeights &&\r\n      node.weight < 2\r\n    ) {\r\n      let className = `node-wall${extraWallClass}`;\r\n      if (node.isWall) className = \"\";\r\n      this.changeState(row, col, false, false, !node.isWall, className);\r\n    }\r\n  }\r\n  handleMouseLeave(row, col) {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    const node = this.state.grid[row][col];\r\n    if (this.startNodeChange === true && node.isWall === false) {\r\n      if (row === EndNodeRow && col === EndNodeCol) {\r\n        this.changeState(row, col, true, true, false, \"node-finish\");\r\n        StartNodeRow = row;\r\n        StartNodeCol = col;\r\n      } else {\r\n        this.changeState(row, col, false, false, false, \"node \");\r\n      }\r\n    }\r\n\r\n    if (this.endNodeChange === true && node.isWall === false) {\r\n      if (row === StartNodeRow && col === StartNodeCol) {\r\n        this.changeState(row, col, true, true, false, \"node-start\");\r\n        EndNodeRow = row;\r\n        EndNodeCol = col;\r\n      } else {\r\n        this.changeState(row, col, false, false, false, \"node \");\r\n      }\r\n    }\r\n\r\n    if (this.stationNodeChange === true && node.isWall === false) {\r\n      if (row === StartNodeRow && col === StartNodeCol) {\r\n        this.changeState(row, col, false, true, false, \"node-start\");\r\n      } else if (row === EndNodeRow && col === EndNodeCol) {\r\n        this.changeState(row, col, true, false, false, \"node-finish\");\r\n      } else {\r\n        this.changeState(row, col, false, false, false, \"node \", false);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    if (this.startNodeChange === true) {\r\n      this.startNodeChange = false;\r\n      // In case up node is a wall\r\n      this.changeState(row, col, false, true, false, \"node-start\");\r\n      StartNodeRow = row;\r\n      StartNodeCol = col;\r\n    } else if (this.endNodeChange === true) {\r\n      this.endNodeChange = false;\r\n      // In case up node is a wall\r\n      this.changeState(row, col, true, false, false, \"node-finish\");\r\n      EndNodeRow = row;\r\n      EndNodeCol = col;\r\n    } else if (this.wallNodeChange === true) {\r\n      this.wallNodeChange = false;\r\n    } else if (this.addingWeights === 2) {\r\n      this.addingWeights = 0;\r\n      document.getElementById(\"weight-button\").style.color = \"white\";\r\n    } else if (this.stationNodeChange === true) {\r\n      this.stationNodeChange = false;\r\n    } else if (\r\n      StartNodeRow !== row &&\r\n      StartNodeCol !== col &&\r\n      StartNodeRow !== row &&\r\n      StartNodeCol !== col &&\r\n      this.addingStations\r\n    ) {\r\n      this.addingStations = false;\r\n    }\r\n  }\r\n  /********************************\r\n  Select the algorithm\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n  selectAnAlgorithm = (algo) => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    AlgorithmSelected = algo;\r\n    const buttonElement = document.getElementById(\"visualise-button\");\r\n    var algoName = \"\";\r\n    if (algo === 1) {\r\n      algoName = \"Djikstra\";\r\n    } else if (algo === 2) {\r\n      algoName = \"A* Star\";\r\n    } else if (algo === 3) {\r\n      algoName = \"DFS\";\r\n    } else if (algo === 4) {\r\n      algoName = \"BFS\";\r\n    }\r\n    if ((algo === 3 || algo === 4) && isWeightPresent(this.state.grid)) {\r\n      if (algo === 3) {\r\n        // buttonElement.innerHTML = `DFS can't run with weighted grid. Remove the weights first`;\r\n        alert(\"DFS can't run with weighted grid. Remove the weights first\");\r\n      } else if (algo === 4) {\r\n        // buttonElement.innerHTML = `BFS can't run with weighted grid. Remove the weights first`;\r\n        alert(\"BFS can't run with weighted grid. Remove the weights first\");\r\n      }\r\n      AlgorithmSelected = 0;\r\n      return;\r\n    }\r\n    buttonElement.innerHTML = `Visualise ${algoName}`;\r\n  };\r\n\r\n  /********************************\r\n  Generate the maze\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  mazeGenerate = (mazeAlgo) => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    this.clearBoard();\r\n    isGeneratingGrid = 1;\r\n    // updateButtonState(\"text-danger\");\r\n    updateAlertBox(\"block\", isAlgoRunning, isGeneratingGrid);\r\n\r\n    const { grid } = this.state;\r\n    var forWalls;\r\n    if (mazeAlgo === 1) {\r\n      forWalls = RecursiveDivision(grid);\r\n    } else if (mazeAlgo === 2) {\r\n      forWalls = basicRandom(grid);\r\n    } else if (mazeAlgo === 3) {\r\n      forWalls = basicWeight(grid);\r\n    } else if (mazeAlgo === 4) {\r\n      forWalls = simpleStair(grid);\r\n    } else {\r\n      return;\r\n    }\r\n    for (let i = 0; i < forWalls.length; i++) {\r\n      setTimeout(() => {\r\n        isGeneratingGrid = 1;\r\n        const node = forWalls[i];\r\n        const element = document.getElementById(`node-${node.row}-${node.col}`);\r\n        if (\r\n          element.className !== \"node node-start\" &&\r\n          element.className !== \"node node-finish\"\r\n        ) {\r\n          // element.className = \"node node-visited\";\r\n          if (mazeAlgo === 3) {\r\n            this.changeState(\r\n              node.row,\r\n              node.col,\r\n              false,\r\n              false,\r\n              false,\r\n              \"node-weight\",\r\n              false,\r\n              node.weight\r\n            );\r\n          } else {\r\n            this.changeState(\r\n              node.row,\r\n              node.col,\r\n              false,\r\n              false,\r\n              true,\r\n              `node-wall${extraWallClass} wall-animate${extraWallClass}`\r\n            );\r\n          }\r\n        }\r\n        if (i === forWalls.length - 1) {\r\n          isGeneratingGrid = 0;\r\n          updateAlertBox(\"none\", isAlgoRunning, isGeneratingGrid);\r\n        }\r\n      }, 20 * i);\r\n    }\r\n\r\n    return;\r\n  };\r\n\r\n  /********************************\r\n  Adding Weights\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  addWeight = (wht) => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    if (wht > 1 && AlgorithmSelected === 3) {\r\n      alert(\"DFS can't run with weighted grid.\");\r\n      return;\r\n    }\r\n    if (wht > 1 && AlgorithmSelected === 4) {\r\n      alert(\"BFS can't run with weighted grid.\");\r\n      return;\r\n    }\r\n    this.addingWeights = 1;\r\n    this.addingStations = false;\r\n    this.wallNodeChange = false;\r\n    weight = wht;\r\n    if (wht > 1)\r\n      document.getElementById(\"weight-button\").style.color = \"#216cf8\";\r\n  };\r\n\r\n  /********************************\r\n  Add station functionality\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n  addStation = () => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    if (stationNodeRow !== -1) {\r\n      this.changeState(\r\n        stationNodeRow,\r\n        stationNodeCol,\r\n        false,\r\n        false,\r\n        false,\r\n        \"node \",\r\n        false,\r\n        1\r\n      );\r\n      stationNodeRow = -1;\r\n      stationNodeCol = -1;\r\n      const buttonElement = document.getElementById(\"station-button\");\r\n      buttonElement.innerHTML = \"Add Station\";\r\n    } else {\r\n      this.addingStations = true;\r\n      this.addingWeights = 0;\r\n      document.getElementById(\"station-button\").style.color = \"#216cf8\";\r\n    }\r\n  };\r\n\r\n  // Clearing the board if user wants to run algorithm again to make visited node unvisited\r\n  removePrevForNextAlgo = () => {\r\n    isAlgoRunning = 0;\r\n    document.getElementById(\"distance\").innerHTML = 0;\r\n    for (let r = 0; r < this.state.GridRowSize; ++r) {\r\n      for (let c = 0; c < this.state.GridColSize; ++c) {\r\n        const node = this.state.grid[r][c];\r\n        if (r === EndNodeRow && c === EndNodeCol) {\r\n          this.changeState(r, c, true, false, false, \"node-finish\");\r\n        } else if (r === StartNodeRow && c === StartNodeCol) {\r\n          this.changeState(r, c, false, true, false, \"node-start\");\r\n        } else {\r\n          // const element = document.getElementById(`node-${r}-${c}`);\r\n          let class_name = \"\";\r\n          if (node.isWall === true) {\r\n            class_name = `node-wall${extraWallClass}`;\r\n          } else if (node.isStation === true) {\r\n            class_name = \"node-station\";\r\n          } else if (node.weight > 1) {\r\n            class_name = \"node-weight\";\r\n          }\r\n          this.changeState(\r\n            r,\r\n            c,\r\n            false,\r\n            false,\r\n            node.isWall,\r\n            class_name,\r\n            node.isStation,\r\n            node.weight\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Resetting visiting distance and previous properties for station feature\r\n  resetForStationPath = () => {\r\n    for (let r = 0; r < this.state.GridRowSize; ++r) {\r\n      for (let c = 0; c < this.state.GridColSize; ++c) {\r\n        const node = this.state.grid[r][c];\r\n        node.isVisited = false;\r\n        node.distance = Infinity;\r\n        node.previousNode = null;\r\n      }\r\n    }\r\n  };\r\n\r\n  /********************************\r\n  Animate the Algorithm\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n  // We have all the visited nodes in order and the path vector just have to animate it using appropriate timing\r\n  animateAlgorithm(\r\n    visitedNodesInOrder,\r\n    nodesInShortestPathOrder,\r\n    startToStation\r\n  ) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i * speed_selected);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const element = document.getElementById(`node-${node.row}-${node.col}`);\r\n        if (\r\n          element.className !== \"node node-start\" &&\r\n          element.className !== \"node node-finish\" &&\r\n          node.isStation === false\r\n        ) {\r\n          let class_name = \"node-visited\";\r\n          if (i > startToStation) {\r\n            class_name = \"node-visited-station\";\r\n          }\r\n          if (node.weight > 1) {\r\n            class_name = \"node-visited node-weight-s\";\r\n            this.changeState(\r\n              node.row,\r\n              node.col,\r\n              false,\r\n              false,\r\n              node.isWall,\r\n              class_name,\r\n              node.isStation,\r\n              node.weight\r\n            );\r\n          } else {\r\n            this.changeState(\r\n              node.row,\r\n              node.col,\r\n              false,\r\n              false,\r\n              node.isWall,\r\n              class_name\r\n            );\r\n          }\r\n        }\r\n      }, 10 * i * speed_selected);\r\n    }\r\n  }\r\n\r\n  /********************************\r\n  Animate The Path\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(\"distance\").innerHTML =\r\n          parseInt(document.getElementById(\"distance\").innerHTML) + node.weight;\r\n        const element = document.getElementById(`node-${node.row}-${node.col}`);\r\n        if (\r\n          element.className !== \"node node-start\" &&\r\n          element.className !== \"node node-finish\" &&\r\n          node.isStation === false\r\n        ) {\r\n          // element.className = \"node node-shortest-path\";\r\n          const next_col = nodesInShortestPathOrder[i + 1].col;\r\n          const next_row = nodesInShortestPathOrder[i + 1].row;\r\n          let class_name = \"\";\r\n          if (node.weight > 1) {\r\n            class_name = `node-shortest-path node-weight-${node.weight}`;\r\n          } else if (next_col === node.col && next_row === node.row + 1) {\r\n            class_name = \"node-shortest-path node-down\";\r\n          } else if (next_col === node.col && next_row === node.row - 1) {\r\n            class_name = \"node-shortest-path node-up\";\r\n          } else if (next_col === node.col - 1 && next_row === node.row) {\r\n            class_name = \"node-shortest-path node-left\";\r\n          } else if (next_col === node.col + 1 && next_row === node.row) {\r\n            class_name = \"node-shortest-path node-right\";\r\n          } else if (next_col === node.col + 1 && next_row === node.row + 1) {\r\n            class_name = \"node-shortest-path node-downright\";\r\n          } else if (next_col === node.col - 1 && next_row === node.row + 1) {\r\n            class_name = \"node-shortest-path node-downleft\";\r\n          } else if (next_col === node.col + 1 && next_row === node.row - 1) {\r\n            class_name = \"node-shortest-path node-upright\";\r\n          } else if (next_col === node.col - 1 && next_row === node.row - 1) {\r\n            class_name = \"node-shortest-path node-upleft\";\r\n          }\r\n\r\n          this.changeState(node.row, node.col, false, false, false, class_name);\r\n        }\r\n        if (i === nodesInShortestPathOrder.length - 1) {\r\n          isAlgoRunning = 0;\r\n          updateAlertBox(\"none\", isAlgoRunning, isGeneratingGrid);\r\n        }\r\n      }, 30 * i * speed_selected);\r\n    }\r\n  }\r\n\r\n  /********************************\r\n  Visualise the algorithm\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  visulalizeAlgorithm = () => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    this.removePrevForNextAlgo();\r\n    document.getElementById(\"distance\").innerHTML = 0;\r\n    const { grid } = this.state;\r\n    const startNode = grid[StartNodeRow][StartNodeCol];\r\n    const finishNode = grid[EndNodeRow][EndNodeCol];\r\n    let visitedNodesInOrderToStation = [];\r\n    let nodesInShotestPathOrderToStation = [];\r\n    let isStation = false;\r\n    let startToStation = Infinity;\r\n    if (stationNodeRow !== -1) {\r\n      isStation = true;\r\n    }\r\n    let stationNode;\r\n\r\n    if (isStation) {\r\n      stationNode = grid[stationNodeRow][stationNodeCol];\r\n    }\r\n\r\n    let visitedNodesInOrder = [];\r\n    isAlgoRunning = 1;\r\n    // updateButtonState(\"text-danger\");\r\n    if (AlgorithmSelected === 1) {\r\n      isAlgoRunning = 1;\r\n      if (isStation) {\r\n        visitedNodesInOrderToStation = dijkstra(\r\n          grid,\r\n          startNode,\r\n          stationNode,\r\n          allowedDirections\r\n        );\r\n        nodesInShotestPathOrderToStation =\r\n          getNodesInShortestPathOrder(stationNode);\r\n        startToStation = visitedNodesInOrderToStation.length;\r\n        nodesInShotestPathOrderToStation.pop();\r\n        this.resetForStationPath();\r\n      }\r\n      if (isStation) {\r\n        visitedNodesInOrder = dijkstra(\r\n          grid,\r\n          stationNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n        visitedNodesInOrder =\r\n          visitedNodesInOrderToStation.concat(visitedNodesInOrder);\r\n      } else {\r\n        visitedNodesInOrder = dijkstra(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n      }\r\n    } else if (AlgorithmSelected === 2) {\r\n      isAlgoRunning = 2;\r\n      if (isStation) {\r\n        visitedNodesInOrderToStation = aStar(\r\n          grid,\r\n          startNode,\r\n          stationNode,\r\n          allowedDirections\r\n        );\r\n        nodesInShotestPathOrderToStation =\r\n          getNodesInShortestPathOrder(stationNode);\r\n        startToStation = visitedNodesInOrderToStation.length;\r\n        nodesInShotestPathOrderToStation.pop();\r\n        this.resetForStationPath();\r\n      }\r\n      if (isStation) {\r\n        visitedNodesInOrder = aStar(\r\n          grid,\r\n          stationNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n        visitedNodesInOrder =\r\n          visitedNodesInOrderToStation.concat(visitedNodesInOrder);\r\n      } else {\r\n        visitedNodesInOrder = aStar(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n      }\r\n    } else if (AlgorithmSelected === 3) {\r\n      isAlgoRunning = 3;\r\n      if (isStation) {\r\n        visitedNodesInOrderToStation = dfs(\r\n          grid,\r\n          startNode,\r\n          stationNode,\r\n          allowedDirections\r\n        );\r\n        nodesInShotestPathOrderToStation =\r\n          getNodesInShortestPathOrder(stationNode);\r\n        startToStation = visitedNodesInOrderToStation.length;\r\n        nodesInShotestPathOrderToStation.pop();\r\n        this.resetForStationPath();\r\n      }\r\n      if (isStation) {\r\n        visitedNodesInOrder = dfs(\r\n          grid,\r\n          stationNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n        visitedNodesInOrder =\r\n          visitedNodesInOrderToStation.concat(visitedNodesInOrder);\r\n      } else {\r\n        visitedNodesInOrder = dfs(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n      }\r\n    } else if (AlgorithmSelected === 4) {\r\n      isAlgoRunning = 4;\r\n      if (isStation) {\r\n        visitedNodesInOrderToStation = bfs(\r\n          grid,\r\n          startNode,\r\n          stationNode,\r\n          allowedDirections\r\n        );\r\n        nodesInShotestPathOrderToStation =\r\n          getNodesInShortestPathOrder(stationNode);\r\n        startToStation = visitedNodesInOrderToStation.length;\r\n        nodesInShotestPathOrderToStation.pop();\r\n        this.resetForStationPath();\r\n      }\r\n      if (isStation) {\r\n        visitedNodesInOrder = bfs(\r\n          grid,\r\n          stationNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n        visitedNodesInOrder =\r\n          visitedNodesInOrderToStation.concat(visitedNodesInOrder);\r\n      } else {\r\n        visitedNodesInOrder = bfs(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n      }\r\n    } else {\r\n      const buttonElement = document.getElementById(\"visualise-button\");\r\n      buttonElement.innerHTML = \"!!! Select Algorithm !!!\";\r\n      isAlgoRunning = 0;\r\n      return;\r\n    }\r\n    updateAlertBox(\"block\", isAlgoRunning, isGeneratingGrid);\r\n    let nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n\r\n    if (isStation) {\r\n      nodesInShortestPathOrder = nodesInShotestPathOrderToStation.concat(\r\n        nodesInShortestPathOrder\r\n      );\r\n    }\r\n    this.animateAlgorithm(\r\n      visitedNodesInOrder,\r\n      nodesInShortestPathOrder,\r\n      startToStation\r\n    );\r\n  };\r\n\r\n  /********************************\r\n  Clear Functionalities \r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  clearBoard = () => {\r\n    document.getElementById(\"distance\").innerHTML = 0;\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    stationNodeCol = -1;\r\n    stationNodeRow = -1;\r\n    const buttonElement = document.getElementById(\"station-button\");\r\n    buttonElement.innerHTML = \"Add Station\";\r\n    this.addingStations = false;\r\n    for (let r = 0; r < this.state.GridRowSize; ++r) {\r\n      for (let c = 0; c < this.state.GridColSize; ++c) {\r\n        if (r === EndNodeRow && c === EndNodeCol) {\r\n          this.changeState(r, c, true, false, false, \"node-finish\", false, 1);\r\n        } else if (r === StartNodeRow && c === StartNodeCol) {\r\n          this.changeState(r, c, false, true, false, \"node-start\", false, 1);\r\n        } else {\r\n          this.changeState(r, c, false, false, false, \"node \", false, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  clearWalls = () => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    for (let r = 0; r < this.state.grid.length; ++r) {\r\n      for (let c = 0; c < this.state.grid[r].length; ++c) {\r\n        if (this.state.grid[r][c].isWall) {\r\n          this.changeState(r, c, false, false, false, \"\", false, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  clearWeight = () => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    for (let r = 0; r < this.state.grid.length; ++r) {\r\n      for (let c = 0; c < this.state.grid[r].length; ++c) {\r\n        if (this.state.grid[r][c].weight > 1) {\r\n          this.changeState(r, c, false, false, false, \"\", false, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  clearPath = () => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    this.removePrevForNextAlgo();\r\n  };\r\n\r\n  /********************************\r\n  Change Direction\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n  changeDirection = (directionCount) => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    if (directionCount === 4) {\r\n      document.getElementById(\"select-directions-toggle-text\").innerHTML =\r\n        \"Directions-4\";\r\n    } else if (directionCount === 8) {\r\n      document.getElementById(\"select-directions-toggle-text\").innerHTML =\r\n        \"Directions-8\";\r\n    }\r\n    allowedDirections = directionCount;\r\n  };\r\n\r\n  /********************************\r\n  Changing Speed\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n  selectSpeedOfVisualization = (speed) => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    if (speed === 1.5) {\r\n      // console.log( document.getElementById(\"select-speed-toggle-text\").innerHTML);\r\n      document.getElementById(\"select-speed-toggle-text\").innerHTML =\r\n        \"Speed-Slow\";\r\n    } else if (speed === 1.0) {\r\n      document.getElementById(\"select-speed-toggle-text\").innerHTML =\r\n        \"Speed-Avg\";\r\n    } else if (speed === 0.5) {\r\n      document.getElementById(\"select-speed-toggle-text\").innerHTML =\r\n        \"Speed-Fast\";\r\n    }\r\n    speed_selected = speed;\r\n  };\r\n\r\n  /********************************\r\n  Change Theme\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  toggleTheme = () => {\r\n    if (theme === 1) {\r\n      theme = 2;\r\n      extraWallClass = \"-dark\";\r\n      this.setState({});\r\n      document.getElementById(\"wall-icon\").style.backgroundColor =\r\n        \"rgb(37,98,145)\";\r\n      document.getElementById(\"unvisited-icon\").style.backgroundColor =\r\n        \"#17191f\";\r\n      document.getElementById(\"path_find\").className = \"backg\";\r\n      document.getElementById(\"cth\").style.color = \"white\";\r\n      document.getElementById(\"alert-box-text\").style.color = \"darkgrey\";\r\n      document.getElementById(\"albx\").className = \"shallow-bulge-dark\";\r\n      document.getElementById(\"wn\").style.color = \"white\";\r\n      document.getElementById(\"st\").style.color = \"white\";\r\n      document.getElementById(\"en\").style.color = \"white\";\r\n      document.getElementById(\"sta\").style.color = \"white\";\r\n      document.getElementById(\"we\").style.color = \"white\";\r\n      document.getElementById(\"uv\").style.color = \"white\";\r\n      document.getElementById(\"vis\").style.color = \"white\";\r\n      document.getElementById(\"sp\").style.color = \"white\";\r\n    } else {\r\n      theme = 1;\r\n      extraWallClass = \"\";\r\n      this.setState({});\r\n      document.getElementById(\"wall-icon\").style.backgroundColor =\r\n        \"rgb(12,53,71)\";\r\n      document.getElementById(\"unvisited-icon\").style.backgroundColor =\r\n        \"rgb(255,255,255)\";\r\n      document.getElementById(\"path_find\").className = \"\";\r\n      document.getElementById(\"wn\").style.color = \"black\";\r\n      document.getElementById(\"alert-box-text\").style.color = \"#868b8f\";\r\n      document.getElementById(\"albx\").className = \"shallow-bulge\";\r\n      document.getElementById(\"cth\").style.color = \"black\";\r\n      document.getElementById(\"st\").style.color = \"black\";\r\n      document.getElementById(\"en\").style.color = \"black\";\r\n      document.getElementById(\"sta\").style.color = \"black\";\r\n      document.getElementById(\"we\").style.color = \"black\";\r\n      document.getElementById(\"uv\").style.color = \"black\";\r\n      document.getElementById(\"vis\").style.color = \"black\";\r\n      document.getElementById(\"sp\").style.color = \"black\";\r\n    }\r\n  };\r\n\r\n  /********************************\r\n  Render Function\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n  render() {\r\n    return (\r\n      <div id=\"path_find\" className=\"\">\r\n        <ControlPanel\r\n          onClickClear_={() => this.clearBoard()}\r\n          onClickVisualize_={() => this.visulalizeAlgorithm()}\r\n          onClickSelect_={(algo) => this.selectAnAlgorithm(algo)}\r\n          onClickAddStation_={() => this.addStation()}\r\n          onClickAddWeight_={(weight) => this.addWeight(weight)}\r\n          onClickChangeSpeed_={(speed) =>\r\n            this.selectSpeedOfVisualization(speed)\r\n          }\r\n          onClickClearPath_={() => this.clearPath()}\r\n          onClickClearWeight_={() => this.clearWeight()}\r\n          onClickClearWalls_={() => this.clearWalls()}\r\n          onClickGenerateMaze_={(mazeAlgo) => this.mazeGenerate(mazeAlgo)}\r\n          onClickChangeDirection_={(directionCount) =>\r\n            this.changeDirection(directionCount)\r\n          }\r\n          onClickToggleTheme_={() => this.toggleTheme()}\r\n          theme={theme}\r\n        ></ControlPanel>\r\n        <div className=\"grid\">\r\n          {this.state.grid.map((row, rowId) => {\r\n            return (\r\n              <div key={rowId} className=\"mar\">\r\n                {row.map((node, nodeId) => {\r\n                  const {\r\n                    col,\r\n                    row,\r\n                    isFinish,\r\n                    isStart,\r\n                    isWall,\r\n                    isStation,\r\n                    refElement,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      ref={refElement}\r\n                      key={nodeId}\r\n                      col={col}\r\n                      row={row}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      isStation={isStation}\r\n                      theme={theme}\r\n                      onMouseDown_={(row, col) =>\r\n                        this.handleMouseDown(row, col)\r\n                      }\r\n                      onMouseUp_={(row, col) => this.handleMouseUp(row, col)}\r\n                      onMouseEnter_={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseLeave_={(row, col) =>\r\n                        this.handleMouseLeave(row, col)\r\n                      }\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction initializeGrid(GridRowSize, GridColSize) {\r\n  const grid = [];\r\n  for (let r = 0; r < GridRowSize; ++r) {\r\n    const row = [];\r\n    for (let c = 0; c < GridColSize; ++c) {\r\n      row.push(createNode(r, c));\r\n    }\r\n    grid.push(row);\r\n  }\r\n  return grid;\r\n}\r\n\r\nconst createNode = (row, col) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isFinish: row === EndNodeRow && col === EndNodeCol,\r\n    isStart: row === StartNodeRow && col === StartNodeCol,\r\n    isWall: false,\r\n    isStation: false,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    previousNode: null,\r\n    weight: 1,\r\n    refElement: React.createRef(),\r\n  };\r\n};\r\n\r\nconst updateAlertBox = (display, algoRun, gridGeneration) => {\r\n  document.getElementById(\"alert-box\").style.display = display;\r\n  if (algoRun === 0 && gridGeneration >= 1) {\r\n    document.getElementById(\"alert-box-text\").innerHTML =\r\n      \"Buttons Disabled. Generating Grid.\";\r\n  } else if (algoRun === 1 && gridGeneration === 0) {\r\n    document.getElementById(\"alert-box-text\").innerHTML =\r\n      \"Buttons Disabled. Running Djikstra, a weighted algorithm.\";\r\n  } else if (algoRun === 2 && gridGeneration === 0) {\r\n    document.getElementById(\"alert-box-text\").innerHTML =\r\n      \"Buttons Disabled. Running A*, a weighted algorithm.\";\r\n  } else if (algoRun === 3 && gridGeneration === 0) {\r\n    document.getElementById(\"alert-box-text\").innerHTML =\r\n      \"Buttons Disabled. DFS is an unweighted algorithm which does not gaurantee shortest path.\";\r\n  } else if (algoRun === 4 && gridGeneration === 0) {\r\n    document.getElementById(\"alert-box-text\").innerHTML =\r\n      \"Buttons Disabled. BFS is an unweighted Algorithm.\";\r\n  }\r\n};\r\n\r\nconst isWeightPresent = (grid) => {\r\n  for (let r = 0; r < grid.length; ++r) {\r\n    for (let c = 0; c < grid[r].length; ++c) {\r\n      if (grid[r][c].weight > 1) return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}