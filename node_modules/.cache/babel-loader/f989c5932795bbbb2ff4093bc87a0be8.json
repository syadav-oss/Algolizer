{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nimport { BinaryHeap } from \"./binaryHeap\";\nlet allowedDirections = 4;\n\nfunction getHeap() {\n  return new BinaryHeap(function (node) {\n    return node.distance;\n  });\n}\n\nexport function dijkstra(grid, startNode, finishNode, allowedDir) {\n  allowedDirections = allowedDir;\n  const visitedNodesForAnimation = [];\n  var heap = getHeap();\n  startNode.distance = 0;\n  heap.push(startNode);\n\n  while (heap.size() > 0) {\n    var closestNode = heap.pop(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesForAnimation; // Else we visit this node and update/relax the distance of its neighbors\n\n    closestNode.isVisited = true;\n    visitedNodesForAnimation.push(closestNode); // If finish node then we reach the destination\n\n    if (closestNode === finishNode) return visitedNodesForAnimation;\n    const unvisitedNeighbors = getAllUnvisitedNeighbors(closestNode, grid);\n\n    for (const neighbor of unvisitedNeighbors) {\n      if (neighbor.distance > closestNode.distance + neighbor.weight) {\n        neighbor.distance = closestNode.distance + neighbor.weight;\n        neighbor.previousNode = closestNode;\n\n        if (heap.find(neighbor)) {\n          heap.updateElement(neighbor);\n        } else {\n          heap.push(neighbor);\n        }\n      }\n    }\n  }\n\n  return visitedNodesForAnimation;\n}\n\nfunction getAllUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const xdir = [1, -1, 0, 0, -1, -1, 1, 1];\n  const ydir = [0, 0, 1, -1, 1, -1, 1, -1];\n  const {\n    col,\n    row\n  } = node;\n\n  for (let i = 0; i < allowedDirections; ++i) {\n    let nextrow = row + xdir[i];\n    let nextcol = col + ydir[i];\n    if (nextrow >= 0 && nextrow < grid.length && nextcol >= 0 && nextcol < grid[0].length && !grid[nextrow][nextcol].isVisited && !grid[nextrow][nextcol].isWall) neighbors.push(grid[nextrow][nextcol]);\n  }\n\n  return neighbors;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["BinaryHeap","allowedDirections","getHeap","node","distance","dijkstra","grid","startNode","finishNode","allowedDir","visitedNodesForAnimation","heap","push","size","closestNode","pop","isWall","Infinity","isVisited","unvisitedNeighbors","getAllUnvisitedNeighbors","neighbor","weight","previousNode","find","updateElement","neighbors","xdir","ydir","col","row","i","nextrow","nextcol","length","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"sources":["C:/Users/Sagar Yadav/OneDrive/Documents/Projects/PathFinding-Visualizer/src/algorithms/dijkstra.js"],"sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nimport { BinaryHeap } from \"./binaryHeap\";\r\n\r\nlet allowedDirections = 4;\r\n\r\nfunction getHeap() {\r\n  return new BinaryHeap(function (node) {\r\n    return node.distance;\r\n  });\r\n}\r\n\r\nexport function dijkstra(grid, startNode, finishNode, allowedDir) {\r\n  allowedDirections = allowedDir;\r\n  const visitedNodesForAnimation = [];\r\n  var heap = getHeap();\r\n\r\n  startNode.distance = 0;\r\n  heap.push(startNode);\r\n\r\n  while (heap.size() > 0) {\r\n    var closestNode = heap.pop();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesForAnimation;\r\n\r\n    // Else we visit this node and update/relax the distance of its neighbors\r\n    closestNode.isVisited = true;\r\n    visitedNodesForAnimation.push(closestNode);\r\n\r\n    // If finish node then we reach the destination\r\n    if (closestNode === finishNode) return visitedNodesForAnimation;\r\n\r\n    const unvisitedNeighbors = getAllUnvisitedNeighbors(closestNode, grid);\r\n\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      if (neighbor.distance > closestNode.distance + neighbor.weight) {\r\n        neighbor.distance = closestNode.distance + neighbor.weight;\r\n        neighbor.previousNode = closestNode;\r\n        if (heap.find(neighbor)) {\r\n          heap.updateElement(neighbor);\r\n        } else {\r\n          heap.push(neighbor);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return visitedNodesForAnimation;\r\n}\r\n\r\nfunction getAllUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const xdir = [1, -1, 0, 0, -1, -1, 1, 1];\r\n  const ydir = [0, 0, 1, -1, 1, -1, 1, -1];\r\n\r\n  const { col, row } = node;\r\n\r\n  for (let i = 0; i < allowedDirections; ++i) {\r\n    let nextrow = row + xdir[i];\r\n    let nextcol = col + ydir[i];\r\n    if (\r\n      nextrow >= 0 &&\r\n      nextrow < grid.length &&\r\n      nextcol >= 0 &&\r\n      nextcol < grid[0].length &&\r\n      !grid[nextrow][nextcol].isVisited &&\r\n      !grid[nextrow][nextcol].isWall\r\n    )\r\n      neighbors.push(grid[nextrow][nextcol]);\r\n  }\r\n\r\n  return neighbors;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}