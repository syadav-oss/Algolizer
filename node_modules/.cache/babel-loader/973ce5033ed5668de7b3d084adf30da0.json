{"ast":null,"code":"export function RecursiveDivision(grid) {\n  let order = [];\n\n  function randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  function checkInside(array, element) {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i].row === element[0] && array[i].col === element[1]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function addHorizontalWall(minX, maxX, y) {\n    var hole = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\n\n    for (var i = minX; i <= maxX; i++) {\n      if (i !== hole && !checkInside(order, [i, y])) order.push(grid[i][y]);\n    }\n  }\n\n  function addVerticalWall(minY, maxY, x) {\n    var hole = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\n\n    for (var i = minY; i <= maxY; i++) {\n      if (i !== hole && !checkInside(order, [x, i])) order.push(grid[x][i]);\n    }\n  }\n\n  function divide(grid, horizontal, start, end) {\n    let diff = [end[0] - start[0], end[1] - start[1]];\n\n    if (horizontal) {\n      if (diff[0] < 1) {\n        return;\n      }\n\n      var y = Math.floor(randomNumber(start[1], end[1]) / 2) * 2;\n      addHorizontalWall(start[0], end[0], y);\n      divide(grid, !horizontal, start, [end[0], y - 1]);\n      divide(grid, !horizontal, [start[0], y + 1], end);\n    } else {\n      if (diff[1] < 1) {\n        return;\n      }\n\n      var x = Math.floor(randomNumber(start[0], end[0]) / 2) * 2;\n      addVerticalWall(start[1], end[1], x);\n      divide(grid, !horizontal, start, [x - 1, end[1]]);\n      divide(grid, !horizontal, [x + 1, start[1]], end);\n    }\n  }\n\n  for (var i = 0; i < grid[0].length - 1; i++) order.push(grid[0][i]);\n\n  for (i = 0; i < grid.length - 1; i++) order.push(grid[i][grid[0].length - 1]);\n\n  for (i = grid[0].length - 1; i > 0; i--) order.push(grid[grid.length - 1][i]);\n\n  for (i = grid.length - 1; i > 0; i--) order.push(grid[i][0]);\n\n  divide(grid, false, [1, 1], [grid.length - 2, grid[0].length - 2]);\n  return order;\n}\n_c = RecursiveDivision;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecursiveDivision\");","map":{"version":3,"names":["RecursiveDivision","grid","order","randomNumber","min","max","Math","floor","random","checkInside","array","element","i","length","row","col","addHorizontalWall","minX","maxX","y","hole","push","addVerticalWall","minY","maxY","x","divide","horizontal","start","end","diff"],"sources":["C:/Users/Sagar Yadav/OneDrive/Documents/Projects/PathFinding-Visualizer/src/mazes/recursiveDiv.js"],"sourcesContent":["export function RecursiveDivision(grid) {\r\n  let order = [];\r\n  function randomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n  function checkInside(array, element) {\r\n    for (let i = 0; i < array.length; i++) {\r\n      if (array[i].row === element[0] && array[i].col === element[1]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function addHorizontalWall(minX, maxX, y) {\r\n    var hole = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\r\n\r\n    for (var i = minX; i <= maxX; i++) {\r\n      if (i !== hole && !checkInside(order, [i, y])) order.push(grid[i][y]);\r\n    }\r\n  }\r\n  function addVerticalWall(minY, maxY, x) {\r\n    var hole = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\r\n\r\n    for (var i = minY; i <= maxY; i++) {\r\n      if (i !== hole && !checkInside(order, [x, i])) order.push(grid[x][i]);\r\n    }\r\n  }\r\n\r\n  function divide(grid, horizontal, start, end) {\r\n    let diff = [end[0] - start[0], end[1] - start[1]];\r\n\r\n    if (horizontal) {\r\n      if (diff[0] < 1) {\r\n        return;\r\n      }\r\n      var y = Math.floor(randomNumber(start[1], end[1]) / 2) * 2;\r\n      addHorizontalWall(start[0], end[0], y);\r\n      divide(grid, !horizontal, start, [end[0], y - 1]);\r\n      divide(grid, !horizontal, [start[0], y + 1], end);\r\n    } else {\r\n      if (diff[1] < 1) {\r\n        return;\r\n      }\r\n      var x = Math.floor(randomNumber(start[0], end[0]) / 2) * 2;\r\n      addVerticalWall(start[1], end[1], x);\r\n      divide(grid, !horizontal, start, [x - 1, end[1]]);\r\n      divide(grid, !horizontal, [x + 1, start[1]], end);\r\n    }\r\n  }\r\n\r\n  for (var i = 0; i < grid[0].length - 1; i++) order.push(grid[0][i]);\r\n\r\n  for (i = 0; i < grid.length - 1; i++) order.push(grid[i][grid[0].length - 1]);\r\n\r\n  for (i = grid[0].length - 1; i > 0; i--) order.push(grid[grid.length - 1][i]);\r\n\r\n  for (i = grid.length - 1; i > 0; i--) order.push(grid[i][0]);\r\n\r\n  divide(grid, false, [1, 1], [grid.length - 2, grid[0].length - 2]);\r\n  return order;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}