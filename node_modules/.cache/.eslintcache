[{"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\index.js":"1","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\App.js":"2","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\reportWebVitals.js":"3","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\PathfindingVisualizer\\PathfindingVisualizer.jsx":"4","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\mazes\\simpleStair.js":"5","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\mazes\\recursiveDiv.js":"6","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\algorithms\\dfs.js":"7","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\algorithms\\aStar.js":"8","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\mazes\\basicWeight.js":"9","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\mazes\\basicRandom.js":"10","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\algorithms\\bfs.js":"11","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\algorithms\\dijkstra.js":"12","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\PathfindingVisualizer\\Node\\Node.jsx":"13","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\PathfindingVisualizer\\ControlPanel\\ControlPanel.jsx":"14","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\algorithms\\binaryHeap.js":"15"},{"size":564,"mtime":1662635746155,"results":"16","hashOfConfig":"17"},{"size":335,"mtime":1664641951503,"results":"18","hashOfConfig":"17"},{"size":375,"mtime":1662635746157,"results":"19","hashOfConfig":"17"},{"size":36074,"mtime":1662635746046,"results":"20","hashOfConfig":"17"},{"size":389,"mtime":1662635746156,"results":"21","hashOfConfig":"17"},{"size":2008,"mtime":1662635746156,"results":"22","hashOfConfig":"17"},{"size":1605,"mtime":1662635746153,"results":"23","hashOfConfig":"17"},{"size":3601,"mtime":1662635746152,"results":"24","hashOfConfig":"17"},{"size":470,"mtime":1662635746156,"results":"25","hashOfConfig":"17"},{"size":403,"mtime":1662635746155,"results":"26","hashOfConfig":"17"},{"size":1809,"mtime":1662635746152,"results":"27","hashOfConfig":"17"},{"size":2845,"mtime":1662635746153,"results":"28","hashOfConfig":"17"},{"size":3155,"mtime":1662635746045,"results":"29","hashOfConfig":"17"},{"size":15459,"mtime":1662635746043,"results":"30","hashOfConfig":"17"},{"size":2918,"mtime":1662635746153,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1psqso9",{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\index.js",[],"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\App.js",[],"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\reportWebVitals.js",[],"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\PathfindingVisualizer\\PathfindingVisualizer.jsx",["64","65"],"// import React, { Component, forwardRef } from \"react\";\r\n\r\nimport React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport ControlPanel from \"./ControlPanel/ControlPanel\";\r\nimport \"./PathfindingVisualizer.css\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\nimport { dfs } from \"../algorithms/dfs\";\r\nimport { bfs } from \"../algorithms/bfs\";\r\nimport { aStar } from \"../algorithms/aStar\";\r\nimport { RecursiveDivision } from \"../mazes/recursiveDiv\";\r\nimport { basicRandom } from \"../mazes/basicRandom\";\r\nimport { simpleStair } from \"../mazes/simpleStair\";\r\nimport { basicWeight } from \"../mazes/basicWeight\";\r\n// import { Alert } from \"bootstrap\";\r\n// import { dijkstraOld } from \"../algorithms/dijkstraOld\";\r\n\r\nlet StartNodeRow = 8;\r\nlet StartNodeCol = 10;\r\nlet EndNodeRow = 8;\r\nlet EndNodeCol = 50;\r\nlet AlgorithmSelected = 0;\r\nlet weight = 0;\r\nlet speed_selected = 1;\r\nlet isAlgoRunning = 0;\r\nlet isGeneratingGrid = 0;\r\nlet stationNodeRow = -1;\r\nlet stationNodeCol = -1;\r\nlet allowedDirections = 4;\r\nlet theme = 1;\r\nlet extraWallClass = \"\";\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props); //Call Construct To Parent Class\r\n    //props refer to the properties, special symbol. Used for passing data to one component to another\r\n    this.state = {\r\n      grid: [],\r\n      GridRowSize: 21,\r\n      GridColSize: 61,\r\n      startNodeChange: false,\r\n      endNodeChange: false,\r\n      mouseIsPressed: false,\r\n      wallNodeChange: false,\r\n      addingStations: false,\r\n      stationsPresent: true,\r\n      stationNodeChange: false,\r\n      addingWeights: 0,\r\n    };\r\n  }\r\n\r\n  // componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\r\n  // Initialization that requires DOM nodes should go here.\r\n  componentDidMount() {\r\n    const grid = initializeGrid(this.state.GridRowSize, this.state.GridColSize);\r\n    this.setState({ grid: grid });\r\n  }\r\n\r\n  //This function changes the state of react and DOM element\r\n  changeState = (\r\n    row,\r\n    col,\r\n    isFinish,\r\n    isStart,\r\n    isWall,\r\n    extraClassName,\r\n    isStation = false,\r\n    weight = 0\r\n  ) => {\r\n    const node = this.state.grid[row][col];\r\n    node.isFinish = isFinish;\r\n    node.isStart = isStart;\r\n    node.isWall = isWall;\r\n    node.isStation = isStation;\r\n    node.isVisited = false;\r\n    node.distance = Infinity;\r\n    node.previousNode = null;\r\n    if (weight) node.weight = weight;\r\n    const element = document.getElementById(`node-${node.row}-${node.col}`);\r\n\r\n    if (weight > 1) {\r\n      extraClassName = `${extraClassName}-${weight}`;\r\n    } else if (!isFinish && !isStart && !isWall && !isStation && weight === 1) {\r\n      extraClassName = \"\";\r\n    }\r\n\r\n    element.className = `node ${extraClassName}`;\r\n    element.isFinish = isFinish;\r\n    element.isStart = isStart;\r\n    element.isWall = isWall;\r\n    element.isStation = isStation;\r\n    element.extraClassName = extraClassName;\r\n    return;\r\n  };\r\n\r\n  /********************************\r\n  Handling Mouse Events \r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  handleMouseDown(row, col) {\r\n    //If algo is running no mouse event will be entertained\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    const node = this.state.grid[row][col];\r\n\r\n    //Start & End Node Change is only allowed when weights and stations are not being added\r\n    if (node.isStart && !this.addingWeights && !this.addingStations) {\r\n      this.startNodeChange = true;\r\n    }\r\n    //changing End Node\r\n    else if (node.isFinish && !this.addingWeights && !this.addingStations) {\r\n      this.endNodeChange = true;\r\n    }\r\n    //Changing Station Node\r\n    //Adding weights & stations only when the node is not a special node\r\n    else if (\r\n      node.isStation &&\r\n      !this.addingWeights &&\r\n      !this.addingStations &&\r\n      !this.startNodeChange &&\r\n      !this.endNodeChange\r\n    ) {\r\n      this.stationNodeChange = true;\r\n    }\r\n    //Adding weights\r\n    else if (\r\n      !node.isFinish &&\r\n      !node.isStart &&\r\n      !node.isStation &&\r\n      !node.isWall &&\r\n      this.addingWeights === 1\r\n    ) {\r\n      this.addingWeights = 2;\r\n      this.changeState(\r\n        row,\r\n        col,\r\n        false,\r\n        false,\r\n        false,\r\n        \"node-weight\",\r\n        false,\r\n        weight\r\n      );\r\n    }\r\n    //Adding Station Nodes\r\n    else if (\r\n      !node.isFinish &&\r\n      !node.isStart &&\r\n      !node.isStation &&\r\n      !node.isWall &&\r\n      this.addingStations === true &&\r\n      stationNodeRow === -1 &&\r\n      node.weight <= 1\r\n    ) {\r\n      this.stationsPresent = true;\r\n      stationNodeRow = row;\r\n      stationNodeCol = col;\r\n      const buttonElement = document.getElementById(\"station-button\");\r\n      document.getElementById(\"station-button\").style.color = \"white\";\r\n      buttonElement.innerHTML = \"Remove Station\";\r\n      this.changeState(row, col, false, false, false, \"node-station\", true);\r\n    }\r\n    //Allowing wall addition only when adding station and adding weight task are not performed\r\n    else if (\r\n      (row !== stationNodeRow || col !== stationNodeCol) &&\r\n      !this.addingStations &&\r\n      !this.addingWeights &&\r\n      node.weight < 2\r\n    ) {\r\n      const node = this.state.grid[row][col];\r\n      this.wallNodeChange = true;\r\n      let className = `node-wall${extraWallClass}`;\r\n      if (node.isWall) className = \"\";\r\n      this.changeState(row, col, false, false, !node.isWall, className);\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    const node = this.state.grid[row][col];\r\n\r\n    //StartNode Change\r\n    if (\r\n      this.startNodeChange === true &&\r\n      node.isWall === false &&\r\n      node.isStation === false &&\r\n      node.weight < 2\r\n    ) {\r\n      this.changeState(row, col, false, true, false, \"node-start\");\r\n      StartNodeRow = row;\r\n      StartNodeCol = col;\r\n    }\r\n    //End Node Change\r\n    else if (\r\n      this.endNodeChange === true &&\r\n      node.isWall === false &&\r\n      node.isStation === false &&\r\n      node.weight < 2\r\n    ) {\r\n      this.changeState(row, col, true, false, false, \"node-finish\");\r\n      EndNodeRow = row;\r\n      EndNodeCol = col;\r\n    }\r\n    //Station Node Change\r\n    else if (\r\n      this.stationNodeChange === true &&\r\n      node.isWall === false &&\r\n      node.weight < 2\r\n    ) {\r\n      if (node.isStart || node.isFinish) {\r\n        let classTemp = node.isStart ? \"node-start\" : \"node-finish\";\r\n        this.changeState(\r\n          row,\r\n          col,\r\n          node.isFinish,\r\n          node.isStart,\r\n          false,\r\n          classTemp\r\n        );\r\n        this.stationNodeChange = false;\r\n        this.addStation();\r\n      } else {\r\n        stationNodeRow = row;\r\n        stationNodeCol = col;\r\n        this.changeState(row, col, false, false, false, \"node-station\", true);\r\n      }\r\n    }\r\n    //Adding weights\r\n    else if (\r\n      !node.isFinish &&\r\n      !node.isStart &&\r\n      !node.isStation &&\r\n      !node.isWall &&\r\n      this.addingWeights === 2\r\n    ) {\r\n      this.changeState(\r\n        row,\r\n        col,\r\n        false,\r\n        false,\r\n        false,\r\n        \"node-weight\",\r\n        false,\r\n        weight\r\n      );\r\n    }\r\n\r\n    //Changing wall states\r\n    else if (\r\n      !node.isFinish &&\r\n      !node.isStart &&\r\n      (row !== stationNodeRow || col !== stationNodeCol) &&\r\n      this.wallNodeChange === true &&\r\n      !this.addingStations &&\r\n      !this.addingWeights &&\r\n      node.weight < 2\r\n    ) {\r\n      let className = `node-wall${extraWallClass}`;\r\n      if (node.isWall) className = \"\";\r\n      this.changeState(row, col, false, false, !node.isWall, className);\r\n    }\r\n  }\r\n  handleMouseLeave(row, col) {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    const node = this.state.grid[row][col];\r\n    if (this.startNodeChange === true && node.isWall === false) {\r\n      if (row === EndNodeRow && col === EndNodeCol) {\r\n        this.changeState(row, col, true, true, false, \"node-finish\");\r\n        StartNodeRow = row;\r\n        StartNodeCol = col;\r\n      } else {\r\n        this.changeState(row, col, false, false, false, \"node \");\r\n      }\r\n    }\r\n\r\n    if (this.endNodeChange === true && node.isWall === false) {\r\n      if (row === StartNodeRow && col === StartNodeCol) {\r\n        this.changeState(row, col, true, true, false, \"node-start\");\r\n        EndNodeRow = row;\r\n        EndNodeCol = col;\r\n      } else {\r\n        this.changeState(row, col, false, false, false, \"node \");\r\n      }\r\n    }\r\n\r\n    if (this.stationNodeChange === true && node.isWall === false) {\r\n      if (row === StartNodeRow && col === StartNodeCol) {\r\n        this.changeState(row, col, false, true, false, \"node-start\");\r\n      } else if (row === EndNodeRow && col === EndNodeCol) {\r\n        this.changeState(row, col, true, false, false, \"node-finish\");\r\n      } else {\r\n        this.changeState(row, col, false, false, false, \"node \", false);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    if (this.startNodeChange === true) {\r\n      this.startNodeChange = false;\r\n      // In case up node is a wall\r\n      this.changeState(row, col, false, true, false, \"node-start\");\r\n      StartNodeRow = row;\r\n      StartNodeCol = col;\r\n    } else if (this.endNodeChange === true) {\r\n      this.endNodeChange = false;\r\n      // In case up node is a wall\r\n      this.changeState(row, col, true, false, false, \"node-finish\");\r\n      EndNodeRow = row;\r\n      EndNodeCol = col;\r\n    } else if (this.wallNodeChange === true) {\r\n      this.wallNodeChange = false;\r\n    } else if (this.addingWeights === 2) {\r\n      this.addingWeights = 0;\r\n      document.getElementById(\"weight-button\").style.color = \"white\";\r\n    } else if (this.stationNodeChange === true) {\r\n      this.stationNodeChange = false;\r\n    } else if (\r\n      StartNodeRow !== row &&\r\n      StartNodeCol !== col &&\r\n      StartNodeRow !== row &&\r\n      StartNodeCol !== col &&\r\n      this.addingStations\r\n    ) {\r\n      this.addingStations = false;\r\n    }\r\n  }\r\n  /********************************\r\n  Select the algorithm\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n  selectAnAlgorithm = (algo) => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    AlgorithmSelected = algo;\r\n    const buttonElement = document.getElementById(\"visualise-button\");\r\n    var algoName = \"\";\r\n    if (algo === 1) {\r\n      algoName = \"Djikstra\";\r\n    } else if (algo === 2) {\r\n      algoName = \"A* Star\";\r\n    } else if (algo === 3) {\r\n      algoName = \"DFS\";\r\n    } else if (algo === 4) {\r\n      algoName = \"BFS\";\r\n    }\r\n    if ((algo === 3 || algo === 4) && isWeightPresent(this.state.grid)) {\r\n      if (algo === 3) {\r\n        // buttonElement.innerHTML = `DFS can't run with weighted grid. Remove the weights first`;\r\n        alert(\"DFS can't run with weighted grid. Remove the weights first\");\r\n      } else if (algo === 4) {\r\n        // buttonElement.innerHTML = `BFS can't run with weighted grid. Remove the weights first`;\r\n        alert(\"BFS can't run with weighted grid. Remove the weights first\");\r\n      }\r\n      AlgorithmSelected = 0;\r\n      return;\r\n    }\r\n    buttonElement.innerHTML = `Visualise ${algoName}`;\r\n  };\r\n\r\n  /********************************\r\n  Generate the maze\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  mazeGenerate = (mazeAlgo) => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    this.clearBoard();\r\n    isGeneratingGrid = 1;\r\n    // updateButtonState(\"text-danger\");\r\n    updateAlertBox(\"block\", isAlgoRunning, isGeneratingGrid);\r\n\r\n    const { grid } = this.state;\r\n    var forWalls;\r\n    if (mazeAlgo === 1) {\r\n      forWalls = RecursiveDivision(grid);\r\n    } else if (mazeAlgo === 2) {\r\n      forWalls = basicRandom(grid);\r\n    } else if (mazeAlgo === 3) {\r\n      forWalls = basicWeight(grid);\r\n    } else if (mazeAlgo === 4) {\r\n      forWalls = simpleStair(grid);\r\n    } else {\r\n      return;\r\n    }\r\n    for (let i = 0; i < forWalls.length; i++) {\r\n      setTimeout(() => {\r\n        isGeneratingGrid = 1;\r\n        const node = forWalls[i];\r\n        const element = document.getElementById(`node-${node.row}-${node.col}`);\r\n        if (\r\n          element.className !== \"node node-start\" &&\r\n          element.className !== \"node node-finish\"\r\n        ) {\r\n          // element.className = \"node node-visited\";\r\n          if (mazeAlgo === 3) {\r\n            this.changeState(\r\n              node.row,\r\n              node.col,\r\n              false,\r\n              false,\r\n              false,\r\n              \"node-weight\",\r\n              false,\r\n              node.weight\r\n            );\r\n          } else {\r\n            this.changeState(\r\n              node.row,\r\n              node.col,\r\n              false,\r\n              false,\r\n              true,\r\n              `node-wall${extraWallClass} wall-animate${extraWallClass}`\r\n            );\r\n          }\r\n        }\r\n        if (i === forWalls.length - 1) {\r\n          isGeneratingGrid = 0;\r\n          updateAlertBox(\"none\", isAlgoRunning, isGeneratingGrid);\r\n        }\r\n      }, 20 * i);\r\n    }\r\n\r\n    return;\r\n  };\r\n\r\n  /********************************\r\n  Adding Weights\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  addWeight = (wht) => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    if (wht > 1 && AlgorithmSelected === 3) {\r\n      alert(\"DFS can't run with weighted grid.\");\r\n      return;\r\n    }\r\n    if (wht > 1 && AlgorithmSelected === 4) {\r\n      alert(\"BFS can't run with weighted grid.\");\r\n      return;\r\n    }\r\n    this.addingWeights = 1;\r\n    this.addingStations = false;\r\n    this.wallNodeChange = false;\r\n    weight = wht;\r\n    if (wht > 1)\r\n      document.getElementById(\"weight-button\").style.color = \"#216cf8\";\r\n  };\r\n\r\n  /********************************\r\n  Add station functionality\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n  addStation = () => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    if (stationNodeRow !== -1) {\r\n      this.changeState(\r\n        stationNodeRow,\r\n        stationNodeCol,\r\n        false,\r\n        false,\r\n        false,\r\n        \"node \",\r\n        false,\r\n        1\r\n      );\r\n      stationNodeRow = -1;\r\n      stationNodeCol = -1;\r\n      const buttonElement = document.getElementById(\"station-button\");\r\n      buttonElement.innerHTML = \"Add Station\";\r\n    } else {\r\n      this.addingStations = true;\r\n      this.addingWeights = 0;\r\n      document.getElementById(\"station-button\").style.color = \"#216cf8\";\r\n    }\r\n  };\r\n\r\n  // Clearing the board if user wants to run algorithm again to make visited node unvisited\r\n  removePrevForNextAlgo = () => {\r\n    isAlgoRunning = 0;\r\n    document.getElementById(\"distance\").innerHTML = 0;\r\n    for (let r = 0; r < this.state.GridRowSize; ++r) {\r\n      for (let c = 0; c < this.state.GridColSize; ++c) {\r\n        const node = this.state.grid[r][c];\r\n        if (r === EndNodeRow && c === EndNodeCol) {\r\n          this.changeState(r, c, true, false, false, \"node-finish\");\r\n        } else if (r === StartNodeRow && c === StartNodeCol) {\r\n          this.changeState(r, c, false, true, false, \"node-start\");\r\n        } else {\r\n          // const element = document.getElementById(`node-${r}-${c}`);\r\n          let class_name = \"\";\r\n          if (node.isWall === true) {\r\n            class_name = `node-wall${extraWallClass}`;\r\n          } else if (node.isStation === true) {\r\n            class_name = \"node-station\";\r\n          } else if (node.weight > 1) {\r\n            class_name = \"node-weight\";\r\n          }\r\n          this.changeState(\r\n            r,\r\n            c,\r\n            false,\r\n            false,\r\n            node.isWall,\r\n            class_name,\r\n            node.isStation,\r\n            node.weight\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Resetting visiting distance and previous properties for station feature\r\n  resetForStationPath = () => {\r\n    for (let r = 0; r < this.state.GridRowSize; ++r) {\r\n      for (let c = 0; c < this.state.GridColSize; ++c) {\r\n        const node = this.state.grid[r][c];\r\n        node.isVisited = false;\r\n        node.distance = Infinity;\r\n        node.previousNode = null;\r\n      }\r\n    }\r\n  };\r\n\r\n  /********************************\r\n  Animate the Algorithm\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n  // We have all the visited nodes in order and the path vector just have to animate it using appropriate timing\r\n  animateAlgorithm(\r\n    visitedNodesInOrder,\r\n    nodesInShortestPathOrder,\r\n    startToStation\r\n  ) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i * speed_selected);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const element = document.getElementById(`node-${node.row}-${node.col}`);\r\n        if (\r\n          element.className !== \"node node-start\" &&\r\n          element.className !== \"node node-finish\" &&\r\n          node.isStation === false\r\n        ) {\r\n          let class_name = \"node-visited\";\r\n          if (i > startToStation) {\r\n            class_name = \"node-visited-station\";\r\n          }\r\n          if (node.weight > 1) {\r\n            class_name = \"node-visited node-weight-s\";\r\n            this.changeState(\r\n              node.row,\r\n              node.col,\r\n              false,\r\n              false,\r\n              node.isWall,\r\n              class_name,\r\n              node.isStation,\r\n              node.weight\r\n            );\r\n          } else {\r\n            this.changeState(\r\n              node.row,\r\n              node.col,\r\n              false,\r\n              false,\r\n              node.isWall,\r\n              class_name\r\n            );\r\n          }\r\n        }\r\n      }, 10 * i * speed_selected);\r\n    }\r\n  }\r\n\r\n  /********************************\r\n  Animate The Path\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(\"distance\").innerHTML =\r\n          parseInt(document.getElementById(\"distance\").innerHTML) + node.weight;\r\n        const element = document.getElementById(`node-${node.row}-${node.col}`);\r\n        if (\r\n          element.className !== \"node node-start\" &&\r\n          element.className !== \"node node-finish\" &&\r\n          node.isStation === false\r\n        ) {\r\n          // element.className = \"node node-shortest-path\";\r\n          const next_col = nodesInShortestPathOrder[i + 1].col;\r\n          const next_row = nodesInShortestPathOrder[i + 1].row;\r\n          let class_name = \"\";\r\n          if (node.weight > 1) {\r\n            class_name = `node-shortest-path node-weight-${node.weight}`;\r\n          } else if (next_col === node.col && next_row === node.row + 1) {\r\n            class_name = \"node-shortest-path node-down\";\r\n          } else if (next_col === node.col && next_row === node.row - 1) {\r\n            class_name = \"node-shortest-path node-up\";\r\n          } else if (next_col === node.col - 1 && next_row === node.row) {\r\n            class_name = \"node-shortest-path node-left\";\r\n          } else if (next_col === node.col + 1 && next_row === node.row) {\r\n            class_name = \"node-shortest-path node-right\";\r\n          } else if (next_col === node.col + 1 && next_row === node.row + 1) {\r\n            class_name = \"node-shortest-path node-downright\";\r\n          } else if (next_col === node.col - 1 && next_row === node.row + 1) {\r\n            class_name = \"node-shortest-path node-downleft\";\r\n          } else if (next_col === node.col + 1 && next_row === node.row - 1) {\r\n            class_name = \"node-shortest-path node-upright\";\r\n          } else if (next_col === node.col - 1 && next_row === node.row - 1) {\r\n            class_name = \"node-shortest-path node-upleft\";\r\n          }\r\n\r\n          this.changeState(node.row, node.col, false, false, false, class_name);\r\n        }\r\n        if (i === nodesInShortestPathOrder.length - 1) {\r\n          isAlgoRunning = 0;\r\n          updateAlertBox(\"none\", isAlgoRunning, isGeneratingGrid);\r\n        }\r\n      }, 30 * i * speed_selected);\r\n    }\r\n  }\r\n\r\n  /********************************\r\n  Visualise the algorithm\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  visulalizeAlgorithm = () => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    this.removePrevForNextAlgo();\r\n    document.getElementById(\"distance\").innerHTML = 0;\r\n    const { grid } = this.state;\r\n    const startNode = grid[StartNodeRow][StartNodeCol];\r\n    const finishNode = grid[EndNodeRow][EndNodeCol];\r\n    let visitedNodesInOrderToStation = [];\r\n    let nodesInShotestPathOrderToStation = [];\r\n    let isStation = false;\r\n    let startToStation = Infinity;\r\n    if (stationNodeRow !== -1) {\r\n      isStation = true;\r\n    }\r\n    let stationNode;\r\n\r\n    if (isStation) {\r\n      stationNode = grid[stationNodeRow][stationNodeCol];\r\n    }\r\n\r\n    let visitedNodesInOrder = [];\r\n    isAlgoRunning = 1;\r\n    // updateButtonState(\"text-danger\");\r\n    if (AlgorithmSelected === 1) {\r\n      isAlgoRunning = 1;\r\n      if (isStation) {\r\n        visitedNodesInOrderToStation = dijkstra(\r\n          grid,\r\n          startNode,\r\n          stationNode,\r\n          allowedDirections\r\n        );\r\n        nodesInShotestPathOrderToStation =\r\n          getNodesInShortestPathOrder(stationNode);\r\n        startToStation = visitedNodesInOrderToStation.length;\r\n        nodesInShotestPathOrderToStation.pop();\r\n        this.resetForStationPath();\r\n      }\r\n      if (isStation) {\r\n        visitedNodesInOrder = dijkstra(\r\n          grid,\r\n          stationNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n        visitedNodesInOrder =\r\n          visitedNodesInOrderToStation.concat(visitedNodesInOrder);\r\n      } else {\r\n        visitedNodesInOrder = dijkstra(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n      }\r\n    } else if (AlgorithmSelected === 2) {\r\n      isAlgoRunning = 2;\r\n      if (isStation) {\r\n        visitedNodesInOrderToStation = aStar(\r\n          grid,\r\n          startNode,\r\n          stationNode,\r\n          allowedDirections\r\n        );\r\n        nodesInShotestPathOrderToStation =\r\n          getNodesInShortestPathOrder(stationNode);\r\n        startToStation = visitedNodesInOrderToStation.length;\r\n        nodesInShotestPathOrderToStation.pop();\r\n        this.resetForStationPath();\r\n      }\r\n      if (isStation) {\r\n        visitedNodesInOrder = aStar(\r\n          grid,\r\n          stationNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n        visitedNodesInOrder =\r\n          visitedNodesInOrderToStation.concat(visitedNodesInOrder);\r\n      } else {\r\n        visitedNodesInOrder = aStar(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n      }\r\n    } else if (AlgorithmSelected === 3) {\r\n      isAlgoRunning = 3;\r\n      if (isStation) {\r\n        visitedNodesInOrderToStation = dfs(\r\n          grid,\r\n          startNode,\r\n          stationNode,\r\n          allowedDirections\r\n        );\r\n        nodesInShotestPathOrderToStation =\r\n          getNodesInShortestPathOrder(stationNode);\r\n        startToStation = visitedNodesInOrderToStation.length;\r\n        nodesInShotestPathOrderToStation.pop();\r\n        this.resetForStationPath();\r\n      }\r\n      if (isStation) {\r\n        visitedNodesInOrder = dfs(\r\n          grid,\r\n          stationNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n        visitedNodesInOrder =\r\n          visitedNodesInOrderToStation.concat(visitedNodesInOrder);\r\n      } else {\r\n        visitedNodesInOrder = dfs(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n      }\r\n    } else if (AlgorithmSelected === 4) {\r\n      isAlgoRunning = 4;\r\n      if (isStation) {\r\n        visitedNodesInOrderToStation = bfs(\r\n          grid,\r\n          startNode,\r\n          stationNode,\r\n          allowedDirections\r\n        );\r\n        nodesInShotestPathOrderToStation =\r\n          getNodesInShortestPathOrder(stationNode);\r\n        startToStation = visitedNodesInOrderToStation.length;\r\n        nodesInShotestPathOrderToStation.pop();\r\n        this.resetForStationPath();\r\n      }\r\n      if (isStation) {\r\n        visitedNodesInOrder = bfs(\r\n          grid,\r\n          stationNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n        visitedNodesInOrder =\r\n          visitedNodesInOrderToStation.concat(visitedNodesInOrder);\r\n      } else {\r\n        visitedNodesInOrder = bfs(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          allowedDirections\r\n        );\r\n      }\r\n    } else {\r\n      const buttonElement = document.getElementById(\"visualise-button\");\r\n      buttonElement.innerHTML = \"!!! Select Algorithm !!!\";\r\n      isAlgoRunning = 0;\r\n      return;\r\n    }\r\n    updateAlertBox(\"block\", isAlgoRunning, isGeneratingGrid);\r\n    let nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n\r\n    if (isStation) {\r\n      nodesInShortestPathOrder = nodesInShotestPathOrderToStation.concat(\r\n        nodesInShortestPathOrder\r\n      );\r\n    }\r\n    this.animateAlgorithm(\r\n      visitedNodesInOrder,\r\n      nodesInShortestPathOrder,\r\n      startToStation\r\n    );\r\n  };\r\n\r\n  /********************************\r\n  Clear Functionalities \r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  clearBoard = () => {\r\n    document.getElementById(\"distance\").innerHTML = 0;\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    stationNodeCol = -1;\r\n    stationNodeRow = -1;\r\n    const buttonElement = document.getElementById(\"station-button\");\r\n    buttonElement.innerHTML = \"Add Station\";\r\n    this.addingStations = false;\r\n    for (let r = 0; r < this.state.GridRowSize; ++r) {\r\n      for (let c = 0; c < this.state.GridColSize; ++c) {\r\n        if (r === EndNodeRow && c === EndNodeCol) {\r\n          this.changeState(r, c, true, false, false, \"node-finish\", false, 1);\r\n        } else if (r === StartNodeRow && c === StartNodeCol) {\r\n          this.changeState(r, c, false, true, false, \"node-start\", false, 1);\r\n        } else {\r\n          this.changeState(r, c, false, false, false, \"node \", false, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  clearWalls = () => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    for (let r = 0; r < this.state.grid.length; ++r) {\r\n      for (let c = 0; c < this.state.grid[r].length; ++c) {\r\n        if (this.state.grid[r][c].isWall) {\r\n          this.changeState(r, c, false, false, false, \"\", false, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  clearWeight = () => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    for (let r = 0; r < this.state.grid.length; ++r) {\r\n      for (let c = 0; c < this.state.grid[r].length; ++c) {\r\n        if (this.state.grid[r][c].weight > 1) {\r\n          this.changeState(r, c, false, false, false, \"\", false, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  clearPath = () => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    this.removePrevForNextAlgo();\r\n  };\r\n\r\n  /********************************\r\n  Change Direction\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n  changeDirection = (directionCount) => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n    if (directionCount === 4) {\r\n      document.getElementById(\"select-directions-toggle-text\").innerHTML =\r\n        \"Directions-4\";\r\n    } else if (directionCount === 8) {\r\n      document.getElementById(\"select-directions-toggle-text\").innerHTML =\r\n        \"Directions-8\";\r\n    }\r\n    allowedDirections = directionCount;\r\n  };\r\n\r\n  /********************************\r\n  Changing Speed\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n  selectSpeedOfVisualization = (speed) => {\r\n    if (isAlgoRunning >= 1 || isGeneratingGrid === 1) {\r\n      return;\r\n    }\r\n\r\n    if (speed === 1.5) {\r\n      // console.log( document.getElementById(\"select-speed-toggle-text\").innerHTML);\r\n      document.getElementById(\"select-speed-toggle-text\").innerHTML =\r\n        \"Speed-Slow\";\r\n    } else if (speed === 1.0) {\r\n      document.getElementById(\"select-speed-toggle-text\").innerHTML =\r\n        \"Speed-Avg\";\r\n    } else if (speed === 0.5) {\r\n      document.getElementById(\"select-speed-toggle-text\").innerHTML =\r\n        \"Speed-Fast\";\r\n    }\r\n    speed_selected = speed;\r\n  };\r\n\r\n  /********************************\r\n  Change Theme\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n\r\n  toggleTheme = () => {\r\n    if (theme === 1) {\r\n      theme = 2;\r\n      extraWallClass = \"-dark\";\r\n      this.setState({});\r\n      document.getElementById(\"wall-icon\").style.backgroundColor =\r\n        \"rgb(37,98,145)\";\r\n      document.getElementById(\"unvisited-icon\").style.backgroundColor =\r\n        \"#17191f\";\r\n      document.getElementById(\"path_find\").className = \"backg\";\r\n      document.getElementById(\"cth\").style.color = \"white\";\r\n      document.getElementById(\"alert-box-text\").style.color = \"darkgrey\";\r\n      document.getElementById(\"albx\").className = \"shallow-bulge-dark\";\r\n      document.getElementById(\"wn\").style.color = \"white\";\r\n      document.getElementById(\"st\").style.color = \"white\";\r\n      document.getElementById(\"en\").style.color = \"white\";\r\n      document.getElementById(\"sta\").style.color = \"white\";\r\n      document.getElementById(\"we\").style.color = \"white\";\r\n      document.getElementById(\"uv\").style.color = \"white\";\r\n      document.getElementById(\"vis\").style.color = \"white\";\r\n      document.getElementById(\"sp\").style.color = \"white\";\r\n    } else {\r\n      theme = 1;\r\n      extraWallClass = \"\";\r\n      this.setState({});\r\n      document.getElementById(\"wall-icon\").style.backgroundColor =\r\n        \"rgb(12,53,71)\";\r\n      document.getElementById(\"unvisited-icon\").style.backgroundColor =\r\n        \"rgb(255,255,255)\";\r\n      document.getElementById(\"path_find\").className = \"\";\r\n      document.getElementById(\"wn\").style.color = \"black\";\r\n      document.getElementById(\"alert-box-text\").style.color = \"#868b8f\";\r\n      document.getElementById(\"albx\").className = \"shallow-bulge\";\r\n      document.getElementById(\"cth\").style.color = \"black\";\r\n      document.getElementById(\"st\").style.color = \"black\";\r\n      document.getElementById(\"en\").style.color = \"black\";\r\n      document.getElementById(\"sta\").style.color = \"black\";\r\n      document.getElementById(\"we\").style.color = \"black\";\r\n      document.getElementById(\"uv\").style.color = \"black\";\r\n      document.getElementById(\"vis\").style.color = \"black\";\r\n      document.getElementById(\"sp\").style.color = \"black\";\r\n    }\r\n  };\r\n\r\n  /********************************\r\n  Render Function\r\n  Code By: Pulkit, Shashank, Tejus\r\n  **********************************/\r\n  render() {\r\n    return (\r\n      <div id=\"path_find\" className=\"\">\r\n        <ControlPanel\r\n          onClickClear_={() => this.clearBoard()}\r\n          onClickVisualize_={() => this.visulalizeAlgorithm()}\r\n          onClickSelect_={(algo) => this.selectAnAlgorithm(algo)}\r\n          onClickAddStation_={() => this.addStation()}\r\n          onClickAddWeight_={(weight) => this.addWeight(weight)}\r\n          onClickChangeSpeed_={(speed) =>\r\n            this.selectSpeedOfVisualization(speed)\r\n          }\r\n          onClickClearPath_={() => this.clearPath()}\r\n          onClickClearWeight_={() => this.clearWeight()}\r\n          onClickClearWalls_={() => this.clearWalls()}\r\n          onClickGenerateMaze_={(mazeAlgo) => this.mazeGenerate(mazeAlgo)}\r\n          onClickChangeDirection_={(directionCount) =>\r\n            this.changeDirection(directionCount)\r\n          }\r\n          onClickToggleTheme_={() => this.toggleTheme()}\r\n          theme={theme}\r\n        ></ControlPanel>\r\n        <div className=\"grid\">\r\n          {this.state.grid.map((row, rowId) => {\r\n            return (\r\n              <div key={rowId} className=\"mar\">\r\n                {row.map((node, nodeId) => {\r\n                  const {\r\n                    col,\r\n                    row,\r\n                    isFinish,\r\n                    isStart,\r\n                    isWall,\r\n                    isStation,\r\n                    refElement,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      ref={refElement}\r\n                      key={nodeId}\r\n                      col={col}\r\n                      row={row}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      isStation={isStation}\r\n                      theme={theme}\r\n                      onMouseDown_={(row, col) =>\r\n                        this.handleMouseDown(row, col)\r\n                      }\r\n                      onMouseUp_={(row, col) => this.handleMouseUp(row, col)}\r\n                      onMouseEnter_={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseLeave_={(row, col) =>\r\n                        this.handleMouseLeave(row, col)\r\n                      }\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction initializeGrid(GridRowSize, GridColSize) {\r\n  const grid = [];\r\n  for (let r = 0; r < GridRowSize; ++r) {\r\n    const row = [];\r\n    for (let c = 0; c < GridColSize; ++c) {\r\n      row.push(createNode(r, c));\r\n    }\r\n    grid.push(row);\r\n  }\r\n  return grid;\r\n}\r\n\r\nconst createNode = (row, col) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isFinish: row === EndNodeRow && col === EndNodeCol,\r\n    isStart: row === StartNodeRow && col === StartNodeCol,\r\n    isWall: false,\r\n    isStation: false,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    previousNode: null,\r\n    weight: 1,\r\n    refElement: React.createRef(),\r\n  };\r\n};\r\n\r\nconst updateAlertBox = (display, algoRun, gridGeneration) => {\r\n  document.getElementById(\"alert-box\").style.display = display;\r\n  if (algoRun === 0 && gridGeneration >= 1) {\r\n    document.getElementById(\"alert-box-text\").innerHTML =\r\n      \"Buttons Disabled. Generating Grid.\";\r\n  } else if (algoRun === 1 && gridGeneration === 0) {\r\n    document.getElementById(\"alert-box-text\").innerHTML =\r\n      \"Buttons Disabled. Running Djikstra, a weighted algorithm.\";\r\n  } else if (algoRun === 2 && gridGeneration === 0) {\r\n    document.getElementById(\"alert-box-text\").innerHTML =\r\n      \"Buttons Disabled. Running A*, a weighted algorithm.\";\r\n  } else if (algoRun === 3 && gridGeneration === 0) {\r\n    document.getElementById(\"alert-box-text\").innerHTML =\r\n      \"Buttons Disabled. DFS is an unweighted algorithm which does not gaurantee shortest path.\";\r\n  } else if (algoRun === 4 && gridGeneration === 0) {\r\n    document.getElementById(\"alert-box-text\").innerHTML =\r\n      \"Buttons Disabled. BFS is an unweighted Algorithm.\";\r\n  }\r\n};\r\n\r\nconst isWeightPresent = (grid) => {\r\n  for (let r = 0; r < grid.length; ++r) {\r\n    for (let c = 0; c < grid[r].length; ++c) {\r\n      if (grid[r][c].weight > 1) return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\mazes\\simpleStair.js",[],"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\mazes\\recursiveDiv.js",[],"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\algorithms\\dfs.js",[],"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\algorithms\\aStar.js",[],"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\mazes\\basicWeight.js",[],"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\mazes\\basicRandom.js",[],"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\algorithms\\bfs.js",[],"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\algorithms\\dijkstra.js",[],"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\PathfindingVisualizer\\Node\\Node.jsx",[],"C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\PathfindingVisualizer\\ControlPanel\\ControlPanel.jsx",["66"],"import React, { Component } from \"react\";\r\nimport \"./ControlPanel.css\";\r\nimport startSvg from \"../Styling/start.svg\";\r\nimport endSvg from \"../Styling/end.svg\";\r\nimport weightpng from \"../Styling/one.png\";\r\nimport stationSvg from \"../Styling/station.svg\";\r\nimport { HiMoon } from \"react-icons/hi\";\r\nimport { CgSun } from \"react-icons/cg\";\r\n\r\nimport { Navbar, Nav, NavDropdown, Button } from \"react-bootstrap\";\r\nlet navLinkClassName = \"nav-links\";\r\nexport default class ControlPanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    const {\r\n      onClickClear_,\r\n      onClickVisualize_,\r\n      onClickSelect_,\r\n      onClickAddStation_,\r\n      onClickChangeSpeed_,\r\n      onClickClearPath_,\r\n      onClickClearWeight_,\r\n      onClickClearWalls_,\r\n      onClickAddWeight_,\r\n      onClickGenerateMaze_,\r\n      onClickChangeDirection_,\r\n      onClickToggleTheme_,\r\n      theme,\r\n    } = this.props;\r\n\r\n    const icon =\r\n      theme == 1 ? <CgSun size={20}></CgSun> : <HiMoon size={20}></HiMoon>;\r\n\r\n    return (\r\n      <div>\r\n        <Navbar expand=\"lg\" variant=\"dark\" className=\"logo\">\r\n          <Navbar.Brand href=\"#\" className=\"ml-5\"></Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse className=\"nav\" id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto col-centered1\">\r\n              <NavDropdown\r\n                title={<b className=\"text-light\">Algorithm</b>}\r\n                id=\"select-algorithm-toggle\"\r\n                className={`${navLinkClassName} mr-3`}\r\n              >\r\n                <NavDropdown.Item\r\n                  href=\"#Dijkstra\"\r\n                  onClick={() => onClickSelect_(1)}\r\n                >\r\n                  Dijkstra's Algorithm\r\n                </NavDropdown.Item>\r\n\r\n                <NavDropdown.Item\r\n                  href=\"#AStar\"\r\n                  onClick={() => onClickSelect_(2)}\r\n                >\r\n                  A* Algorithm\r\n                </NavDropdown.Item>\r\n\r\n                <NavDropdown.Divider />\r\n\r\n                <NavDropdown.Item href=\"#DFS\" onClick={() => onClickSelect_(3)}>\r\n                  Depth-First Search\r\n                </NavDropdown.Item>\r\n\r\n                <NavDropdown.Item href=\"#BFS\" onClick={() => onClickSelect_(4)}>\r\n                  Breadth-First Search\r\n                </NavDropdown.Item>\r\n              </NavDropdown>\r\n\r\n              <NavDropdown\r\n                title={<b className=\"text-light\">Mazes & Patterns</b>}\r\n                id=\"maze-generate-toggle\"\r\n                className={`${navLinkClassName} mr-3`}\r\n              >\r\n                <NavDropdown.Item\r\n                  href=\"#action/3.1\"\r\n                  onClick={() => onClickGenerateMaze_(1)}\r\n                >\r\n                  Recursive Division\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                  href=\"#action/3.2\"\r\n                  onClick={() => onClickGenerateMaze_(2)}\r\n                >\r\n                  Basic Random Maze\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                  href=\"#action/3.3\"\r\n                  onClick={() => onClickGenerateMaze_(3)}\r\n                >\r\n                  Basic Weight Maze\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                  href=\"#action/3.4\"\r\n                  onClick={() => onClickGenerateMaze_(4)}\r\n                >\r\n                  Simple Stair Pattern\r\n                </NavDropdown.Item>\r\n              </NavDropdown>\r\n\r\n              <NavDropdown\r\n                title={\r\n                  <b id=\"weight-button\" style={{ color: \"white\" }}>\r\n                    Add Weight\r\n                  </b>\r\n                }\r\n                id=\"add-weight-toggle\"\r\n                className={`${navLinkClassName} mr-3`}\r\n              >\r\n                <NavDropdown.Item\r\n                  href=\"#weight1\"\r\n                  onClick={() => onClickAddWeight_(1)}\r\n                >\r\n                  1\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                  href=\"#weight2\"\r\n                  onClick={() => onClickAddWeight_(2)}\r\n                >\r\n                  2\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                  href=\"#weight3\"\r\n                  onClick={() => onClickAddWeight_(3)}\r\n                >\r\n                  3\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Item\r\n                  href=\"#weight4\"\r\n                  onClick={() => onClickAddWeight_(4)}\r\n                >\r\n                  4\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                  href=\"#weight5\"\r\n                  onClick={() => onClickAddWeight_(5)}\r\n                >\r\n                  5\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                  href=\"#weight6\"\r\n                  onClick={() => onClickAddWeight_(6)}\r\n                >\r\n                  6\r\n                </NavDropdown.Item>\r\n              </NavDropdown>\r\n              <Nav.Link\r\n                href=\"#add\"\r\n                className={`${navLinkClassName} mr-3`}\r\n                onClick={() => onClickAddStation_()}\r\n              >\r\n                <b id=\"station-button\" style={{ color: \"white\" }}>\r\n                  Add Station\r\n                </b>\r\n              </Nav.Link>\r\n              <Button\r\n                id=\"visualise-button\"\r\n                variant=\"outline-primary\"\r\n                className=\"mr-3\"\r\n                onClick={() => onClickVisualize_()}\r\n              >\r\n                Visualise\r\n              </Button>\r\n\r\n              <NavDropdown\r\n                title={\r\n                  <b id=\"clear\" className=\"text-light\">\r\n                    Clear\r\n                  </b>\r\n                }\r\n                id=\"clear-toggle\"\r\n                className={`${navLinkClassName} mr-3`}\r\n              >\r\n                <NavDropdown.Item\r\n                  href=\"#clear-board\"\r\n                  id=\"clear-board\"\r\n                  onClick={() => onClickClear_()}\r\n                >\r\n                  Clear Board\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                  href=\"#clear-weights\"\r\n                  id=\"clear-weights\"\r\n                  onClick={() => onClickClearWeight_()}\r\n                >\r\n                  Clear Weight\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                  href=\"#clear-walls\"\r\n                  id=\"clear-walls\"\r\n                  onClick={() => onClickClearWalls_()}\r\n                >\r\n                  Clear Walls\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                  href=\"#clear-path\"\r\n                  id=\"clear-path\"\r\n                  onClick={() => onClickClearPath_()}\r\n                >\r\n                  Clear Path\r\n                </NavDropdown.Item>\r\n              </NavDropdown>\r\n              <NavDropdown\r\n                title={\r\n                  <b id=\"select-directions-toggle-text\" className=\"text-light\">\r\n                    Directions-4\r\n                  </b>\r\n                }\r\n                id=\"select-directions-toggle\"\r\n                className={`${navLinkClassName} mr-3`}\r\n              >\r\n                <NavDropdown.Item\r\n                  href=\"#4\"\r\n                  onClick={() => onClickChangeDirection_(4)}\r\n                >\r\n                  4\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                  href=\"#8\"\r\n                  onClick={() => onClickChangeDirection_(8)}\r\n                >\r\n                  8\r\n                </NavDropdown.Item>\r\n              </NavDropdown>\r\n              <NavDropdown\r\n                title={\r\n                  <b id=\"select-speed-toggle-text\" className=\"text-light\">\r\n                    Speed-Avg\r\n                  </b>\r\n                }\r\n                id=\"select-speed-toggle\"\r\n                className={`${navLinkClassName} mr-3`}\r\n              >\r\n                <NavDropdown.Item\r\n                  href=\"#slow\"\r\n                  onClick={() => onClickChangeSpeed_(1.5)}\r\n                >\r\n                  Slow\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                  href=\"#average\"\r\n                  onClick={() => onClickChangeSpeed_(1.0)}\r\n                >\r\n                  Average\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item\r\n                  href=\"#fast\"\r\n                  onClick={() => onClickChangeSpeed_(0.5)}\r\n                >\r\n                  Fast\r\n                </NavDropdown.Item>\r\n              </NavDropdown>\r\n              <Nav.Link>\r\n                <b style={{ color: \"white\" }}>Distance = </b>\r\n                <b className=\"text-light\" id=\"distance\">\r\n                  0\r\n                </b>\r\n              </Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <Navbar expand=\"lg\">\r\n          <Navbar.Collapse className=\"nav\" id=\"basic-navbar-nav\">\r\n            <Navbar.Brand className=\"col-centered\">\r\n              <img\r\n                alt=\"\"\r\n                src={startSvg}\r\n                width=\"20\"\r\n                height=\"20\"\r\n                className=\"d-inline-block align-top\"\r\n                style={{ marginRight: \"10px\" }}\r\n              />\r\n              {\"\"}\r\n              <p id=\"st\" style={{ fontFamily: \"sans-serif\", fontSize: \"17px\" }}>\r\n                {\" \"}\r\n                Start Node{\" \"}\r\n              </p>\r\n            </Navbar.Brand>\r\n            <Navbar.Brand>\r\n              <img\r\n                alt=\"\"\r\n                src={endSvg}\r\n                width=\"20\"\r\n                height=\"20\"\r\n                className=\"d-inline-block align-top\"\r\n                style={{ marginRight: \"10px\" }}\r\n              />{\" \"}\r\n              <p id=\"en\" style={{ fontFamily: \"sans-serif\", fontSize: \"17px\" }}>\r\n                {\" \"}\r\n                Target Node{\" \"}\r\n              </p>\r\n            </Navbar.Brand>\r\n            <Navbar.Brand>\r\n              <img\r\n                alt=\"\"\r\n                src={stationSvg}\r\n                width=\"20\"\r\n                height=\"20\"\r\n                className=\"d-inline-block align-top\"\r\n                style={{ marginRight: \"10px\" }}\r\n              />{\" \"}\r\n              <p\r\n                id=\"sta\"\r\n                style={{ fontFamily: \"sans-serif\", fontSize: \"17px\" }}\r\n              >\r\n                {\" \"}\r\n                Station Node{\" \"}\r\n              </p>\r\n            </Navbar.Brand>\r\n            <Navbar.Brand>\r\n              <img\r\n                alt=\"\"\r\n                src={weightpng}\r\n                width=\"20\"\r\n                height=\"20\"\r\n                className=\"d-inline-block align-top\"\r\n                style={{ marginRight: \"10px\" }}\r\n              />{\" \"}\r\n              <p id=\"we\" style={{ fontFamily: \"sans-serif\", fontSize: \"17px\" }}>\r\n                {\" \"}\r\n                Weight Node{\" \"}\r\n              </p>\r\n            </Navbar.Brand>\r\n            <Navbar.Brand>\r\n              <button\r\n                id=\"ct\"\r\n                className=\"btn btn-link ab\"\r\n                onClick={() => onClickToggleTheme_()}\r\n              >\r\n                {icon}\r\n              </button>\r\n              {\"\"}\r\n              <p\r\n                id=\"cth\"\r\n                style={{ fontFamily: \"sans-serif\", fontSize: \"17px\" }}\r\n              >\r\n                {\" \"}\r\n                Change Theme{\" \"}\r\n              </p>\r\n            </Navbar.Brand>\r\n            <Navbar.Brand>\r\n              <div className=\"d-flex flex-row\">\r\n                <div\r\n                  id=\"unvisited-icon\"\r\n                  className=\"p-2\"\r\n                  style={{\r\n                    width: \"20px\",\r\n                    height: \"20px\",\r\n                    outline: \"1px solid rgb(175, 216, 248)\",\r\n                    backgroundColor: `rgb(255, 255, 255)`,\r\n                    display: \"inline-block\",\r\n                    marginRight: \"10px\",\r\n                    borderRadius: \"2px\",\r\n                  }}\r\n                />\r\n                <p\r\n                  id=\"uv\"\r\n                  style={{ fontFamily: \"sans-serif\", fontSize: \"17px\" }}\r\n                >\r\n                  {\" \"}\r\n                  Unvisited Node{\" \"}\r\n                </p>\r\n              </div>{\" \"}\r\n            </Navbar.Brand>\r\n\r\n            <Navbar.Brand>\r\n              <div className=\"d-flex flex-row\">\r\n                <div\r\n                  className=\"p-2\"\r\n                  style={{\r\n                    width: \"20px\",\r\n                    height: \"20px\",\r\n                    backgroundColor: `rgba(0, 218, 207, 0.75)`,\r\n                    marginRight: \"10px\",\r\n                    borderRadius: \"2px\",\r\n                  }}\r\n                />\r\n                <p\r\n                  id=\"vis\"\r\n                  style={{ fontFamily: \"sans-serif\", fontSize: \"17px\" }}\r\n                >\r\n                  {\" \"}\r\n                  Visited Node{\" \"}\r\n                </p>\r\n              </div>\r\n            </Navbar.Brand>\r\n            <Navbar.Brand>\r\n              <div className=\"d-flex flex-row\">\r\n                <div\r\n                  className=\"p-2\"\r\n                  style={{\r\n                    width: \"20px\",\r\n                    height: \"20px\",\r\n                    backgroundColor: `rgba(112, 0, 217, 0.75)`,\r\n                    marginRight: \"10px\",\r\n                    borderRadius: \"2px\",\r\n                  }}\r\n                />\r\n                <p\r\n                  id=\"sp\"\r\n                  style={{ fontFamily: \"sans-serif\", fontSize: \"17px\" }}\r\n                >\r\n                  {\" \"}\r\n                  Shortest-path Node{\" \"}\r\n                </p>\r\n              </div>\r\n            </Navbar.Brand>\r\n            <Navbar.Brand>\r\n              <div className=\"d-flex flex-row\">\r\n                <div\r\n                  id=\"wall-icon\"\r\n                  className=\"p-2\"\r\n                  style={{\r\n                    width: \"20px\",\r\n                    height: \"20px\",\r\n                    backgroundColor: `rgb(12, 53, 71)`,\r\n                    marginRight: \"10px\",\r\n                    borderRadius: \"2px\",\r\n                  }}\r\n                />\r\n                <p\r\n                  id=\"wn\"\r\n                  style={{ fontFamily: \"sans-serif\", fontSize: \"17px\" }}\r\n                >\r\n                  {\" \"}\r\n                  Wall Node{\" \"}\r\n                </p>\r\n              </div>\r\n            </Navbar.Brand>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <Navbar>\r\n          <Navbar.Brand className=\"col-centered2\">\r\n            <div id=\"alert-box\" className=\"shallow-container\">\r\n              <div id=\"albx\" className=\"shallow-bulge\">\r\n                <span\r\n                  id=\"alert-box-text\"\r\n                  style={{\r\n                    color: \"#868b8f\",\r\n                    fontFamily: \"sans-serif\",\r\n                    verticalAlign: \"middle\",\r\n                  }}\r\n                >\r\n                  Buttons Disabled\r\n                </span>\r\n                {/* </div>\r\n                 */}\r\n              </div>\r\n            </div>\r\n          </Navbar.Brand>\r\n        </Navbar>\r\n\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Sagar Yadav\\OneDrive\\Documents\\Projects\\PathFinding-Visualizer\\src\\algorithms\\binaryHeap.js",[],{"ruleId":"67","severity":1,"message":"68","line":403,"column":18,"nodeType":"69","messageId":"70","endLine":438,"endColumn":8},{"ruleId":"67","severity":1,"message":"71","line":610,"column":18,"nodeType":"69","messageId":"70","endLine":650,"endColumn":8},{"ruleId":"72","severity":1,"message":"73","line":35,"column":13,"nodeType":"74","messageId":"75","endLine":35,"endColumn":15},"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'isGeneratingGrid', 'extraWallClass', 'extraWallClass', 'isGeneratingGrid', 'isAlgoRunning', 'isGeneratingGrid'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'isAlgoRunning', 'isAlgoRunning', 'isGeneratingGrid'.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]